; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30137.0 

	TITLE	C:\Users\ilyak\Desktop\YAP\Êóðñà÷\Debug\ñub_ver_2.0.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__A2143F22_corecrt_stdio_config@h DB 01H
__829E1958_corecrt_wstdio@h DB 01H
__6DFAE8B8_stdio@h DB 01H
__20BB4341_malloc@h DB 01H
__1C12C7C8_ñub_ver_2@0@cpp DB 01H
msvcjmc	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	___local_stdio_scanf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	__vfscanf_l
PUBLIC	_scanf
PUBLIC	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z			; cub_9
PUBLIC	?cub@@YAPAPAHHPAPAH@Z				; cub
PUBLIC	?check@@YAHH@Z					; check
PUBLIC	_main
PUBLIC	__JustMyCode_Default
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_01HIHLOKLC@1@				; `string'
PUBLIC	??_C@_07FPFIAEAJ@1?54?62?53@			; `string'
PUBLIC	??_C@_04IDILIIH@?$CF3d?5@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_02CIBPIIHJ@n?$DN@				; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_08HEJHNOEB@Prostite@			; `string'
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp____stdio_common_vfscanf:PROC
EXTRN	__imp__malloc:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_08HEJHNOEB@Prostite@
CONST	SEGMENT
??_C@_08HEJHNOEB@Prostite@ DB 'Prostite', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02CIBPIIHJ@n?$DN@
CONST	SEGMENT
??_C@_02CIBPIIHJ@n?$DN@ DB 'n=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IDILIIH@?$CF3d?5@
CONST	SEGMENT
??_C@_04IDILIIH@?$CF3d?5@ DB '%3d ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FPFIAEAJ@1?54?62?53@
CONST	SEGMENT
??_C@_07FPFIAEAJ@1?54?62?53@ DB '1 4', 0aH, '2 3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01HIHLOKLC@1@
CONST	SEGMENT
??_C@_01HIHLOKLC@1@ DB '1', 00H				; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	022H
	DB	0e4H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	022H
	DW	0693H
voltbl	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\ilyak\Desktop\YAP\Êóðñà÷\ñub_ver_2.0.cpp
;	COMDAT _main
_TEXT	SEGMENT
_N$1 = -60						; size = 4
_tab$ = -48						; size = 4
_prov$ = -24						; size = 4
_n$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_main	PROC						; COMDAT

; 2849 : int main() {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __1C12C7C8_ñub_ver_2@0@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 2850 : 	int n, prov, i;
; 2851 : 	int** tab = 0;

	mov	DWORD PTR _tab$[ebp], 0

; 2852 : 
; 2853 : 	printf("n=");

	push	OFFSET ??_C@_02CIBPIIHJ@n?$DN@
	call	_printf
	add	esp, 4

; 2854 : 	scanf("%d", &n);

	lea	eax, DWORD PTR _n$[ebp]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd@
	call	_scanf
	add	esp, 8

; 2855 : 	printf("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	call	_printf
	add	esp, 4

; 2856 : 
; 2857 : 	prov = check(n * n);

	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, DWORD PTR _n$[ebp]
	push	eax
	call	?check@@YAHH@Z				; check
	add	esp, 4
	mov	DWORD PTR _prov$[ebp], eax

; 2858 : 	if (prov == 0)

	cmp	DWORD PTR _prov$[ebp], 0
	jne	SHORT $LN2@main

; 2859 : 		printf("Prostite");

	push	OFFSET ??_C@_08HEJHNOEB@Prostite@
	call	_printf
	add	esp, 4
	jmp	SHORT $LN1@main
$LN2@main:

; 2860 : 	else {
; 2861 : 		if (n > 10) {

	cmp	DWORD PTR _n$[ebp], 10			; 0000000aH
	jle	SHORT $LN4@main

; 2862 : 			int N = n / 3;

	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR _N$1[ebp], eax

; 2863 : 			tab = cub(N, 0);

	push	0
	mov	eax, DWORD PTR _N$1[ebp]
	push	eax
	call	?cub@@YAPAPAHHPAPAH@Z			; cub
	add	esp, 8
	mov	DWORD PTR _tab$[ebp], eax

; 2864 : 			cub(n, tab);

	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	call	?cub@@YAPAPAHHPAPAH@Z			; cub
	add	esp, 8

; 2865 : 		}

	jmp	SHORT $LN1@main
$LN4@main:

; 2866 : 		else
; 2867 : 			cub(n, 0);

	push	0
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	call	?cub@@YAPAPAHHPAPAH@Z			; cub
	add	esp, 8
$LN1@main:

; 2868 : 	}
; 2869 : }

	xor	eax, eax
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@main
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN9@main:
	DD	1
	DD	$LN8@main
$LN8@main:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN7@main
$LN7@main:
	DB	110					; 0000006eH
	DB	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\ilyak\Desktop\YAP\Êóðñà÷\ñub_ver_2.0.cpp
;	COMDAT ?check@@YAHH@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?check@@YAHH@Z PROC					; check, COMDAT

; 2835 : int check(int n) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __1C12C7C8_ñub_ver_2@0@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 2836 : 	if (n != 9)

	cmp	DWORD PTR _n$[ebp], 9
	je	SHORT $LN4@check
$LN2@check:

; 2837 : 		while (n % 9 == 0 && n != 0)

	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 9
	idiv	ecx
	test	edx, edx
	jne	SHORT $LN4@check
	cmp	DWORD PTR _n$[ebp], 0
	je	SHORT $LN4@check

; 2838 : 			n /= 9;

	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 9
	idiv	ecx
	mov	DWORD PTR _n$[ebp], eax
	jmp	SHORT $LN2@check
$LN4@check:

; 2839 : 	if (n % 4 == 0)

	mov	eax, DWORD PTR _n$[ebp]
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN9@check
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN9@check:
	test	eax, eax
	jne	SHORT $LN5@check

; 2840 : 		n /= 4;

	mov	eax, DWORD PTR _n$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _n$[ebp], eax
$LN5@check:

; 2841 : 	if (n == 1)

	cmp	DWORD PTR _n$[ebp], 1
	jne	SHORT $LN6@check

; 2842 : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN1@check
	jmp	SHORT $LN1@check
$LN6@check:

; 2843 : 	else
; 2844 : 		return 0;

	xor	eax, eax
$LN1@check:

; 2845 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?check@@YAHH@Z ENDP					; check
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\ilyak\Desktop\YAP\Êóðñà÷\ñub_ver_2.0.cpp
;	COMDAT ?cub@@YAPAPAHHPAPAH@Z
_TEXT	SEGMENT
_j$1 = -120						; size = 4
_i$2 = -108						; size = 4
_j$3 = -96						; size = 4
_i$4 = -84						; size = 4
_sum$5 = -72						; size = 4
_k$6 = -60						; size = 4
_j$7 = -48						; size = 4
_table$8 = -36						; size = 4
_i$9 = -24						; size = 4
_flag$10 = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_n$ = 8							; size = 4
_tab$ = 12						; size = 4
?cub@@YAPAPAHHPAPAH@Z PROC				; cub, COMDAT

; 2742 : int** cub(int n, int** tab) {

	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-124]
	mov	ecx, 31					; 0000001fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __1C12C7C8_ñub_ver_2@0@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 2743 : 	if (n == 1)

	cmp	DWORD PTR _n$[ebp], 1
	jne	SHORT $LN23@cub

; 2744 : 		printf("1");

	push	OFFSET ??_C@_01HIHLOKLC@1@
	call	_printf
	add	esp, 4
	jmp	$LN1@cub
$LN23@cub:

; 2745 : 	else if (n == 2)

	cmp	DWORD PTR _n$[ebp], 2
	jne	SHORT $LN25@cub

; 2746 : 		printf("1 4\n2 3");

	push	OFFSET ??_C@_07FPFIAEAJ@1?54?62?53@
	call	_printf
	add	esp, 4
	jmp	$LN1@cub
$LN25@cub:

; 2747 : 	else {
; 2748 : 		int flag = 0;

	mov	DWORD PTR _flag$10[ebp], 0

; 2749 : 		int i;
; 2750 : 		int** table = (int**)malloc(n * sizeof(*table));

	xor	ecx, ecx
	mov	eax, DWORD PTR _n$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _table$8[ebp], eax

; 2751 : 		for (i = 0; i < n; i++)

	mov	DWORD PTR _i$9[ebp], 0
	jmp	SHORT $LN4@cub
$LN2@cub:
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax
$LN4@cub:
	mov	eax, DWORD PTR _i$9[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN3@cub

; 2752 : 			table[i] = (int*)malloc(n * sizeof(table));

	xor	ecx, ecx
	mov	eax, DWORD PTR _n$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	edx, DWORD PTR _table$8[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	jmp	SHORT $LN2@cub
$LN3@cub:

; 2753 : 		int j;
; 2754 : 
; 2755 : 		//çàíóëÿåì
; 2756 : 		for (i = 0; i < n; i++) {

	mov	DWORD PTR _i$9[ebp], 0
	jmp	SHORT $LN7@cub
$LN5@cub:
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax
$LN7@cub:
	mov	eax, DWORD PTR _i$9[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN6@cub

; 2757 : 			for (j = 0; j < n; j++)

	mov	DWORD PTR _j$7[ebp], 0
	jmp	SHORT $LN10@cub
$LN8@cub:
	mov	eax, DWORD PTR _j$7[ebp]
	add	eax, 1
	mov	DWORD PTR _j$7[ebp], eax
$LN10@cub:
	mov	eax, DWORD PTR _j$7[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN9@cub

; 2758 : 				table[i][j] = 0;

	mov	eax, DWORD PTR _i$9[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _j$7[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	jmp	SHORT $LN8@cub
$LN9@cub:

; 2759 : 		}

	jmp	SHORT $LN5@cub
$LN6@cub:

; 2760 : 
; 2761 : 		j = 0 /*ñòðîêè*/;

	mov	DWORD PTR _j$7[ebp], 0

; 2762 : 		int k = 0 /*ñòîëáöû*/;

	mov	DWORD PTR _k$6[ebp], 0

; 2763 : 
; 2764 : 		i = 1;

	mov	DWORD PTR _i$9[ebp], 1

; 2765 : 		//ïåðâûé êâàäðàíò âñåãäà îäèíàêîâûé drurddlld
; 2766 : 		table[j++][k] = i++;

	mov	eax, DWORD PTR _j$7[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$6[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$7[ebp]
	add	edx, 1
	mov	DWORD PTR _j$7[ebp], edx
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax

; 2767 : 		table[j][k++] = i++;

	mov	eax, DWORD PTR _j$7[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$6[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$6[ebp]
	add	edx, 1
	mov	DWORD PTR _k$6[ebp], edx
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax

; 2768 : 		table[j--][k] = i++;

	mov	eax, DWORD PTR _j$7[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$6[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$7[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$7[ebp], edx
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax

; 2769 : 		table[j][k++] = i++;

	mov	eax, DWORD PTR _j$7[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$6[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$6[ebp]
	add	edx, 1
	mov	DWORD PTR _k$6[ebp], edx
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax

; 2770 : 		table[j++][k] = i++;

	mov	eax, DWORD PTR _j$7[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$6[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$7[ebp]
	add	edx, 1
	mov	DWORD PTR _j$7[ebp], edx
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax

; 2771 : 		table[j++][k] = i++;

	mov	eax, DWORD PTR _j$7[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$6[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$7[ebp]
	add	edx, 1
	mov	DWORD PTR _j$7[ebp], edx
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax

; 2772 : 		table[j][k--] = i++;

	mov	eax, DWORD PTR _j$7[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$6[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$6[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$6[ebp], edx
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax

; 2773 : 		table[j][k--] = i++;

	mov	eax, DWORD PTR _j$7[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$6[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$6[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$6[ebp], edx
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax

; 2774 : 		table[j++][k] = i++;

	mov	eax, DWORD PTR _j$7[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$6[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$7[ebp]
	add	edx, 1
	mov	DWORD PTR _j$7[ebp], edx
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax

; 2775 : 
; 2776 : 		//âòîðîé êâàäðàíò
; 2777 : 		if ((n * n) % 4 == 0) { //ddrrulurr

	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, DWORD PTR _n$[ebp]
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN35@cub
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN35@cub:
	test	eax, eax
	jne	$LN27@cub

; 2778 : 			table[j++][k] = i++;

	mov	eax, DWORD PTR _j$7[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$6[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$7[ebp]
	add	edx, 1
	mov	DWORD PTR _j$7[ebp], edx
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax

; 2779 : 			table[j++][k] = i++;

	mov	eax, DWORD PTR _j$7[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$6[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$7[ebp]
	add	edx, 1
	mov	DWORD PTR _j$7[ebp], edx
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax

; 2780 : 			table[j][k++] = i++;

	mov	eax, DWORD PTR _j$7[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$6[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$6[ebp]
	add	edx, 1
	mov	DWORD PTR _k$6[ebp], edx
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax

; 2781 : 			table[j][k++] = i++;

	mov	eax, DWORD PTR _j$7[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$6[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$6[ebp]
	add	edx, 1
	mov	DWORD PTR _k$6[ebp], edx
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax

; 2782 : 			table[j--][k] = i++;

	mov	eax, DWORD PTR _j$7[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$6[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$7[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$7[ebp], edx
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax

; 2783 : 			table[j][k--] = i++;

	mov	eax, DWORD PTR _j$7[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$6[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$6[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$6[ebp], edx
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax

; 2784 : 			table[j--][k] = i++;

	mov	eax, DWORD PTR _j$7[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$6[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$7[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$7[ebp], edx
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax

; 2785 : 			table[j][k++] = i++;

	mov	eax, DWORD PTR _j$7[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$6[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$6[ebp]
	add	edx, 1
	mov	DWORD PTR _k$6[ebp], edx
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax

; 2786 : 			table[j][k] = i++;

	mov	eax, DWORD PTR _j$7[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$6[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$9[ebp]
	add	edx, 1
	mov	DWORD PTR _i$9[ebp], edx

; 2787 : 			//table[j][k + 1] = (*i)++;
; 2788 : 
; 2789 : 			flag = 23;

	mov	DWORD PTR _flag$10[ebp], 23		; 00000017H

; 2790 : 		}

	jmp	$LN28@cub
$LN27@cub:

; 2791 : 		else {//rrdlldrrd
; 2792 : 			table[j][k++] = i++;

	mov	eax, DWORD PTR _j$7[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$6[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$6[ebp]
	add	edx, 1
	mov	DWORD PTR _k$6[ebp], edx
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax

; 2793 : 			table[j][k++] = i++;

	mov	eax, DWORD PTR _j$7[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$6[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$6[ebp]
	add	edx, 1
	mov	DWORD PTR _k$6[ebp], edx
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax

; 2794 : 			table[j++][k] = i++;

	mov	eax, DWORD PTR _j$7[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$6[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$7[ebp]
	add	edx, 1
	mov	DWORD PTR _j$7[ebp], edx
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax

; 2795 : 			table[j][k--] = i++;

	mov	eax, DWORD PTR _j$7[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$6[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$6[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$6[ebp], edx
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax

; 2796 : 			table[j][k--] = i++;

	mov	eax, DWORD PTR _j$7[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$6[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$6[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$6[ebp], edx
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax

; 2797 : 			table[j++][k] = i++;

	mov	eax, DWORD PTR _j$7[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$6[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$7[ebp]
	add	edx, 1
	mov	DWORD PTR _j$7[ebp], edx
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax

; 2798 : 			table[j][k++] = i++;

	mov	eax, DWORD PTR _j$7[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$6[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$6[ebp]
	add	edx, 1
	mov	DWORD PTR _k$6[ebp], edx
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax

; 2799 : 			table[j][k++] = i++;

	mov	eax, DWORD PTR _j$7[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$6[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$6[ebp]
	add	edx, 1
	mov	DWORD PTR _k$6[ebp], edx
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax

; 2800 : 			table[j][k] = i++;

	mov	eax, DWORD PTR _j$7[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$6[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$9[ebp]
	add	edx, 1
	mov	DWORD PTR _i$9[ebp], edx

; 2801 : 
; 2802 : 			flag = 39;

	mov	DWORD PTR _flag$10[ebp], 39		; 00000027H
$LN28@cub:

; 2803 : 		}
; 2804 : 		int sum = n * n - 18;

	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, DWORD PTR _n$[ebp]
	sub	eax, 18					; 00000012H
	mov	DWORD PTR _sum$5[ebp], eax

; 2805 : 
; 2806 : 
; 2807 : 		if (tab == 0) {

	cmp	DWORD PTR _tab$[ebp], 0
	jne	$LN29@cub

; 2808 : 			flag = cub_9(table, flag, i, j, k, n, &sum, 0, -1, -1, -1);

	push	-1
	push	-1
	push	-1
	push	0
	lea	eax, DWORD PTR _sum$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$6[ebp]
	push	edx
	mov	eax, DWORD PTR _j$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _flag$10[ebp]
	push	edx
	mov	eax, DWORD PTR _table$8[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _flag$10[ebp], eax

; 2809 : 			//printf("flag=%d\n", flag);
; 2810 : 
; 2811 : 			//ïå÷àòàåì
; 2812 : 			for (int i = 0; i < n; i++) {

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN13@cub
$LN11@cub:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN13@cub:
	mov	eax, DWORD PTR _i$4[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN12@cub

; 2813 : 				for (int j = 0; j < n; j++)

	mov	DWORD PTR _j$3[ebp], 0
	jmp	SHORT $LN16@cub
$LN14@cub:
	mov	eax, DWORD PTR _j$3[ebp]
	add	eax, 1
	mov	DWORD PTR _j$3[ebp], eax
$LN16@cub:
	mov	eax, DWORD PTR _j$3[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN15@cub

; 2814 : 					printf("%3d ", table[i][j]);

	mov	eax, DWORD PTR _i$4[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _j$3[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	push	OFFSET ??_C@_04IDILIIH@?$CF3d?5@
	call	_printf
	add	esp, 8
	jmp	SHORT $LN14@cub
$LN15@cub:

; 2815 : 				printf("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	call	_printf
	add	esp, 4

; 2816 : 			}

	jmp	SHORT $LN11@cub
$LN12@cub:

; 2817 : 			printf("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	call	_printf
	add	esp, 4

; 2818 : 		}

	jmp	$LN30@cub
$LN29@cub:

; 2819 : 		else {
; 2820 : 			flag = cub_9(table, flag, i, j, k, n, &sum, tab, 2, 1, 0);

	push	0
	push	1
	push	2
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sum$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$9[ebp]
	push	edx
	mov	eax, DWORD PTR _flag$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$8[ebp]
	push	ecx
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _flag$10[ebp], eax

; 2821 : 			for (int i = 0; i < n; i++) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN19@cub
$LN17@cub:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN19@cub:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN18@cub

; 2822 : 				for (int j = 0; j < n; j++)

	mov	DWORD PTR _j$1[ebp], 0
	jmp	SHORT $LN22@cub
$LN20@cub:
	mov	eax, DWORD PTR _j$1[ebp]
	add	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
$LN22@cub:
	mov	eax, DWORD PTR _j$1[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN21@cub

; 2823 : 					printf("%3d ", table[i][j]);

	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _table$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _j$1[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	push	OFFSET ??_C@_04IDILIIH@?$CF3d?5@
	call	_printf
	add	esp, 8
	jmp	SHORT $LN20@cub
$LN21@cub:

; 2824 : 				printf("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	call	_printf
	add	esp, 4

; 2825 : 			}

	jmp	SHORT $LN17@cub
$LN18@cub:

; 2826 : 			printf("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	call	_printf
	add	esp, 4
$LN30@cub:

; 2827 : 		}
; 2828 : 
; 2829 : 		return table;

	mov	eax, DWORD PTR _table$8[ebp]
$LN1@cub:

; 2830 : 	}
; 2831 : 
; 2832 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN34@cub
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN34@cub:
	DD	1
	DD	$LN33@cub
$LN33@cub:
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN32@cub
$LN32@cub:
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	0
?cub@@YAPAPAHHPAPAH@Z ENDP				; cub
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\ilyak\Desktop\YAP\Êóðñà÷\ñub_ver_2.0.cpp
;	COMDAT ?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z
_TEXT	SEGMENT
_result$1 = -776					; size = 4
_result$2 = -764					; size = 4
_result$3 = -752					; size = 4
_result$4 = -740					; size = 4
_result$5 = -728					; size = 4
_result$6 = -716					; size = 4
_result$7 = -704					; size = 4
_result$8 = -692					; size = 4
_result$9 = -680					; size = 4
_result$10 = -668					; size = 4
_result$11 = -656					; size = 4
_result$12 = -644					; size = 4
_result$13 = -632					; size = 4
_result$14 = -620					; size = 4
_result$15 = -608					; size = 4
_result$16 = -596					; size = 4
_result$17 = -584					; size = 4
_result$18 = -572					; size = 4
_result$19 = -560					; size = 4
_result$20 = -548					; size = 4
_result$21 = -536					; size = 4
_result$22 = -524					; size = 4
_result$23 = -512					; size = 4
_result$24 = -500					; size = 4
_result$25 = -488					; size = 4
_result$26 = -476					; size = 4
_result$27 = -464					; size = 4
_result$28 = -452					; size = 4
_result$29 = -440					; size = 4
_result$30 = -428					; size = 4
_result$31 = -416					; size = 4
_result$32 = -404					; size = 4
_result$33 = -392					; size = 4
_result$34 = -380					; size = 4
_result$35 = -368					; size = 4
_result$36 = -356					; size = 4
_result$37 = -344					; size = 4
_result$38 = -332					; size = 4
_result$39 = -320					; size = 4
_result$40 = -308					; size = 4
_result$41 = -296					; size = 4
_result$42 = -284					; size = 4
_result$43 = -272					; size = 4
_result$44 = -260					; size = 4
_result$45 = -248					; size = 4
_result$46 = -236					; size = 4
_result$47 = -224					; size = 4
_result$48 = -212					; size = 4
_result$49 = -200					; size = 4
_result$50 = -188					; size = 4
_result$51 = -176					; size = 4
_result$52 = -164					; size = 4
_result$53 = -152					; size = 4
_result$54 = -140					; size = 4
_result$55 = -128					; size = 4
_result$56 = -116					; size = 4
_result$57 = -104					; size = 4
_result$58 = -92					; size = 4
_result$59 = -80					; size = 4
_result$60 = -68					; size = 4
_result$61 = -56					; size = 4
_result$62 = -44					; size = 4
_result$63 = -32					; size = 4
_result$64 = -20					; size = 4
_f$ = -8						; size = 4
_table$ = 8						; size = 4
_flag$ = 12						; size = 4
_i$ = 16						; size = 4
_j$ = 20						; size = 4
_k$ = 24						; size = 4
_n$ = 28						; size = 4
_sum$ = 32						; size = 4
_tab$ = 36						; size = 4
_I$ = 40						; size = 4
_J$ = 44						; size = 4
_K$ = 48						; size = 4
?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z PROC			; cub_9, COMDAT

; 5    : int cub_9(int** table, int flag, int i, int j, int k, int n, int* sum, int** tab, int I, int J, int K) {

	push	ebp
	mov	ebp, esp
	sub	esp, 1164				; 0000048cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-780]
	mov	ecx, 195				; 000000c3H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __1C12C7C8_ñub_ver_2@0@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 6    : 	/*for (int i = 0; i < n; i++) {
; 7    : 		for (int j = 0; j < n; j++)
; 8    : 			printf("%3d ", table[i][j]);
; 9    : 		printf("\n");
; 10   : 	}
; 11   : 	printf("\n flag = %d\n", flag);*/
; 12   : 	int f;
; 13   : 
; 14   : 
; 15   : 	//âûçîâû ïàòòåðíîâ (n<10)
; 16   : 	if (tab != 0) {

	cmp	DWORD PTR _tab$[ebp], 0
	je	$LN2@cub_9

; 17   : 		if (*sum != 9 && table[0][n - 1] == 0) {

	mov	eax, DWORD PTR _sum$[ebp]
	cmp	DWORD PTR [eax], 9
	je	$LN4@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+ecx*4-4], 0
	jne	$LN4@cub_9

; 18   : 			//öåíòðîâûe
; 19   : 			if (table[0][n - 1] != n * n && flag == 13 || flag == 27) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	SHORT $LN8@cub_9
	cmp	DWORD PTR _flag$[ebp], 13		; 0000000dH
	je	SHORT $LN7@cub_9
$LN8@cub_9:
	cmp	DWORD PTR _flag$[ebp], 27		; 0000001bH
	jne	$LN6@cub_9
$LN7@cub_9:

; 20   : 				if (table[0][n - 1] != n * n && flag == 13 && K != n / 3 - 1 && tab[J][K + 1] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN9@cub_9
	cmp	DWORD PTR _flag$[ebp], 13		; 0000000dH
	jne	$LN9@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	sub	eax, 1
	cmp	DWORD PTR _K$[ebp], eax
	je	$LN9@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4+4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN9@cub_9

; 21   : 					k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 22   : 					K++;

	mov	eax, DWORD PTR _K$[ebp]
	add	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 23   : 					////c_1(table, &i, &j, &k);
; 24   : 
; 25   : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 26   : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 27   : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 28   : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 29   : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 30   : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 31   : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 32   : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 33   : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 34   : 
; 35   : 				}

	jmp	$LN10@cub_9
$LN9@cub_9:

; 36   : 				else if (J != n / 3 - 1 && J != 0 && tab[J - 1][K] - tab[J][K] == 1) {

	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	sub	eax, 1
	cmp	DWORD PTR _J$[ebp], eax
	je	$LN10@cub_9
	cmp	DWORD PTR _J$[ebp], 0
	je	$LN10@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN10@cub_9

; 37   : 					j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 38   : 					J++;

	mov	eax, DWORD PTR _J$[ebp]
	add	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 39   : 					////c_1(table, &i, &j, &k);
; 40   : 
; 41   : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 42   : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 43   : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 44   : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 45   : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 46   : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 47   : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 48   : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 49   : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN10@cub_9:

; 50   : 
; 51   : 				}
; 52   : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 53   : 				f = flag;

	mov	eax, DWORD PTR _flag$[ebp]
	mov	DWORD PTR _f$[ebp], eax

; 54   : 				int result = cub_9(table, 17, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$64[ebp], eax

; 55   : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$64[ebp], -1
	jne	$LN6@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN6@cub_9

; 56   : 					////c_11(table, &i, &j, &k);
; 57   : 
; 58   : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 59   : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 60   : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 61   : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 62   : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 63   : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 64   : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 65   : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 66   : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 67   : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 68   : 
; 69   : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 70   : 					if (f == 13) {

	cmp	DWORD PTR _f$[ebp], 13			; 0000000dH
	jne	SHORT $LN13@cub_9

; 71   : 						K--;

	mov	eax, DWORD PTR _K$[ebp]
	sub	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 72   : 						k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 73   : 					}

	jmp	SHORT $LN6@cub_9
$LN13@cub_9:

; 74   : 					else {
; 75   : 						J--;

	mov	eax, DWORD PTR _J$[ebp]
	sub	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 76   : 						j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN6@cub_9:

; 77   : 					}
; 78   : 				}
; 79   : 			}
; 80   : 			if (table[0][n - 1] != n * n && flag == 17 && J != n / 3 - 1 && tab[J + 1][K] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN15@cub_9
	cmp	DWORD PTR _flag$[ebp], 17		; 00000011H
	jne	$LN15@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	sub	eax, 1
	cmp	DWORD PTR _J$[ebp], eax
	je	$LN15@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN15@cub_9

; 81   : 				j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 82   : 				J++;

	mov	eax, DWORD PTR _J$[ebp]
	add	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 83   : 				////c_1(table, &i, &j, &k);
; 84   : 
; 85   : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 86   : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 87   : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 88   : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 89   : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 90   : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 91   : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 92   : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 93   : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 94   : 
; 95   : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 96   : 				int result = cub_9(table, 47, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	47					; 0000002fH
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$63[ebp], eax

; 97   : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$63[ebp], -1
	jne	$LN15@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN15@cub_9

; 98   : 					////c_11(table, &i, &j, &k);
; 99   : 
; 100  : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 101  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 102  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 103  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 104  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 105  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 106  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 107  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 108  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 109  : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 110  : 
; 111  : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 112  : 					j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 113  : 					J--;

	mov	eax, DWORD PTR _J$[ebp]
	sub	eax, 1
	mov	DWORD PTR _J$[ebp], eax
$LN15@cub_9:

; 114  : 				}
; 115  : 			}
; 116  : 			if (table[0][n - 1] != n * n && flag == 13 || flag == 27) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	SHORT $LN19@cub_9
	cmp	DWORD PTR _flag$[ebp], 13		; 0000000dH
	je	SHORT $LN18@cub_9
$LN19@cub_9:
	cmp	DWORD PTR _flag$[ebp], 27		; 0000001bH
	jne	$LN17@cub_9
$LN18@cub_9:

; 117  : 				if (table[0][n - 1] != n * n && flag == 13 && K != n / 3 - 1 && tab[J][K + 1] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN20@cub_9
	cmp	DWORD PTR _flag$[ebp], 13		; 0000000dH
	jne	$LN20@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	sub	eax, 1
	cmp	DWORD PTR _K$[ebp], eax
	je	$LN20@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4+4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN20@cub_9

; 118  : 					k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 119  : 					K++;

	mov	eax, DWORD PTR _K$[ebp]
	add	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 120  : 					////c_4(table, &i, &j, &k);
; 121  : 
; 122  : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 123  : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 124  : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 125  : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 126  : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 127  : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 128  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 129  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 130  : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 131  : 
; 132  : 				}

	jmp	$LN21@cub_9
$LN20@cub_9:

; 133  : 				else if (J != n / 3 - 1 && J != n / 3 - 1 && tab[J + 1][K] - tab[J][K] == 1) {

	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	sub	eax, 1
	cmp	DWORD PTR _J$[ebp], eax
	je	$LN21@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	sub	eax, 1
	cmp	DWORD PTR _J$[ebp], eax
	je	$LN21@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN21@cub_9

; 134  : 					j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 135  : 					J++;

	mov	eax, DWORD PTR _J$[ebp]
	add	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 136  : 					////c_4(table, &i, &j, &k);
; 137  : 
; 138  : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 139  : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 140  : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 141  : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 142  : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 143  : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 144  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 145  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 146  : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN21@cub_9:

; 147  : 
; 148  : 				}
; 149  : 
; 150  : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 151  : 				f = flag;

	mov	eax, DWORD PTR _flag$[ebp]
	mov	DWORD PTR _f$[ebp], eax

; 152  : 				int result = cub_9(table, 23, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	23					; 00000017H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$62[ebp], eax

; 153  : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$62[ebp], -1
	jne	$LN17@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN17@cub_9

; 154  : 					////c_44(table, &i, &j, &k);
; 155  : 
; 156  : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 157  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 158  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 159  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 160  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 161  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 162  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 163  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 164  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 165  : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 166  : 
; 167  : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 168  : 					if (f == 13) {

	cmp	DWORD PTR _f$[ebp], 13			; 0000000dH
	jne	SHORT $LN24@cub_9

; 169  : 						K--;

	mov	eax, DWORD PTR _K$[ebp]
	sub	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 170  : 						k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 171  : 					}

	jmp	SHORT $LN17@cub_9
$LN24@cub_9:

; 172  : 					else {
; 173  : 						J--;

	mov	eax, DWORD PTR _J$[ebp]
	sub	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 174  : 						j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN17@cub_9:

; 175  : 					}
; 176  : 				}
; 177  : 			}
; 178  : 			if (table[0][n - 1] != n * n && flag == 23 && K != n / 3 - 1 && tab[J][K + 1] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN26@cub_9
	cmp	DWORD PTR _flag$[ebp], 23		; 00000017H
	jne	$LN26@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	sub	eax, 1
	cmp	DWORD PTR _K$[ebp], eax
	je	$LN26@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4+4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN26@cub_9

; 179  : 				k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 180  : 				K++;

	mov	eax, DWORD PTR _K$[ebp]
	add	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 181  : 				////c_4(table, &i, &j, &k);
; 182  : 
; 183  : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 184  : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 185  : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 186  : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 187  : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 188  : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 189  : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 190  : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 191  : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 192  : 
; 193  : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 194  : 				int result = cub_9(table, 33, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	33					; 00000021H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$61[ebp], eax

; 195  : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$61[ebp], -1
	jne	$LN26@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN26@cub_9

; 196  : 					////c_44(table, &i, &j, &k);
; 197  : 
; 198  : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 199  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 200  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 201  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 202  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 203  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 204  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 205  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 206  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 207  : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 208  : 
; 209  : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 210  : 					k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 211  : 					K--;

	mov	eax, DWORD PTR _K$[ebp]
	sub	eax, 1
	mov	DWORD PTR _K$[ebp], eax
$LN26@cub_9:

; 212  : 				}
; 213  : 			}
; 214  : 			if (table[0][n - 1] != n * n && flag == 29 || flag == 31) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	SHORT $LN30@cub_9
	cmp	DWORD PTR _flag$[ebp], 29		; 0000001dH
	je	SHORT $LN29@cub_9
$LN30@cub_9:
	cmp	DWORD PTR _flag$[ebp], 31		; 0000001fH
	jne	$LN28@cub_9
$LN29@cub_9:

; 215  : 				if (table[0][n - 1] != n * n && flag == 31 && K != 0 && tab[J][K - 1] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN31@cub_9
	cmp	DWORD PTR _flag$[ebp], 31		; 0000001fH
	jne	$LN31@cub_9
	cmp	DWORD PTR _K$[ebp], 0
	je	$LN31@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4-4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN31@cub_9

; 216  : 					k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 217  : 					K--;

	mov	eax, DWORD PTR _K$[ebp]
	sub	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 218  : 					////c_2(table, &i, &j, &k);
; 219  : 
; 220  : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 221  : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 222  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 223  : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 224  : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 225  : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 226  : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 227  : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 228  : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 229  : 
; 230  : 				}

	jmp	$LN32@cub_9
$LN31@cub_9:

; 231  : 				else if (J != n / 3 - 1 && J != n / 3 - 1 && tab[J + 1][K] - tab[J][K] == 1) {

	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	sub	eax, 1
	cmp	DWORD PTR _J$[ebp], eax
	je	$LN32@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	sub	eax, 1
	cmp	DWORD PTR _J$[ebp], eax
	je	$LN32@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN32@cub_9

; 232  : 					j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 233  : 					J++;

	mov	eax, DWORD PTR _J$[ebp]
	add	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 234  : 					////c_2(table, &i, &j, &k);
; 235  : 
; 236  : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 237  : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 238  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 239  : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 240  : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 241  : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 242  : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 243  : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 244  : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN32@cub_9:

; 245  : 
; 246  : 				}
; 247  : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 248  : 				f = flag;

	mov	eax, DWORD PTR _flag$[ebp]
	mov	DWORD PTR _f$[ebp], eax

; 249  : 				int result = cub_9(table, 39, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	39					; 00000027H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$60[ebp], eax

; 250  : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$60[ebp], -1
	jne	$LN28@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN28@cub_9

; 251  : 					////c_22(table, &i, &j, &k);
; 252  : 
; 253  : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 254  : 
; 255  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 256  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 257  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 258  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 259  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 260  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 261  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 262  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 263  : 
; 264  : 
; 265  : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 266  : 
; 267  : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 268  : 					if (f == 31) {

	cmp	DWORD PTR _f$[ebp], 31			; 0000001fH
	jne	SHORT $LN35@cub_9

; 269  : 						K++;

	mov	eax, DWORD PTR _K$[ebp]
	add	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 270  : 						k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 271  : 					}

	jmp	SHORT $LN28@cub_9
$LN35@cub_9:

; 272  : 					else {
; 273  : 						J--;

	mov	eax, DWORD PTR _J$[ebp]
	sub	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 274  : 						j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN28@cub_9:

; 275  : 					}
; 276  : 				}
; 277  : 			}
; 278  : 			if (table[0][n - 1] != n * n && flag == 39 && J != n / 3 - 1 && tab[J + 1][K] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN37@cub_9
	cmp	DWORD PTR _flag$[ebp], 39		; 00000027H
	jne	$LN37@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	sub	eax, 1
	cmp	DWORD PTR _J$[ebp], eax
	je	$LN37@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN37@cub_9

; 279  : 				j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 280  : 				J++;

	mov	eax, DWORD PTR _J$[ebp]
	add	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 281  : 				////c_2(table, &i, &j, &k);
; 282  : 
; 283  : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 284  : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 285  : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 286  : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 287  : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 288  : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 289  : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 290  : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 291  : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 292  : 
; 293  : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 294  : 				int result = cub_9(table, 49, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	49					; 00000031H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$59[ebp], eax

; 295  : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$59[ebp], -1
	jne	$LN37@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN37@cub_9

; 296  : 					////c_22(table, &i, &j, &k);
; 297  : 
; 298  : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 299  : 
; 300  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 301  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 302  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 303  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 304  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 305  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 306  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 307  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 308  : 
; 309  : 
; 310  : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 311  : 
; 312  : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 313  : 					j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 314  : 					J--;

	mov	eax, DWORD PTR _J$[ebp]
	sub	eax, 1
	mov	DWORD PTR _J$[ebp], eax
$LN37@cub_9:

; 315  : 				}
; 316  : 			}
; 317  : 			if (table[0][n - 1] != n * n && flag == 29 || flag == 31) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	SHORT $LN41@cub_9
	cmp	DWORD PTR _flag$[ebp], 29		; 0000001dH
	je	SHORT $LN40@cub_9
$LN41@cub_9:
	cmp	DWORD PTR _flag$[ebp], 31		; 0000001fH
	jne	$LN39@cub_9
$LN40@cub_9:

; 318  : 				if (table[0][n - 1] != n * n && flag == 31 && K != 0 && tab[J][K - 1] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN42@cub_9
	cmp	DWORD PTR _flag$[ebp], 31		; 0000001fH
	jne	$LN42@cub_9
	cmp	DWORD PTR _K$[ebp], 0
	je	$LN42@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4-4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN42@cub_9

; 319  : 					k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 320  : 					K--;

	mov	eax, DWORD PTR _K$[ebp]
	sub	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 321  : 					////c_8(table, &i, &j, &k);
; 322  : 
; 323  : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 324  : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 325  : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 326  : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 327  : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 328  : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 329  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 330  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 331  : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 332  : 
; 333  : 				}

	jmp	$LN43@cub_9
$LN42@cub_9:

; 334  : 				else if (J != n / 3 - 1 && J != n / 3 - 1 && tab[J + 1][K] - tab[J][K] == 1) {

	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	sub	eax, 1
	cmp	DWORD PTR _J$[ebp], eax
	je	$LN43@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	sub	eax, 1
	cmp	DWORD PTR _J$[ebp], eax
	je	$LN43@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN43@cub_9

; 335  : 					j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 336  : 					J++;

	mov	eax, DWORD PTR _J$[ebp]
	add	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 337  : 					////c_8(table, &i, &j, &k);
; 338  : 
; 339  : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 340  : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 341  : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 342  : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 343  : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 344  : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 345  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 346  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 347  : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN43@cub_9:

; 348  : 
; 349  : 				}
; 350  : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 351  : 				f = flag;

	mov	eax, DWORD PTR _flag$[ebp]
	mov	DWORD PTR _f$[ebp], eax

; 352  : 				int result = cub_9(table, 21, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$58[ebp], eax

; 353  : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$58[ebp], -1
	jne	$LN39@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN39@cub_9

; 354  : 					////c_88(table, &i, &j, &k);
; 355  : 
; 356  : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 357  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 358  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 359  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 360  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 361  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 362  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 363  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 364  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 365  : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 366  : 
; 367  : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 368  : 					if (f == 31) {

	cmp	DWORD PTR _f$[ebp], 31			; 0000001fH
	jne	SHORT $LN46@cub_9

; 369  : 						K--;

	mov	eax, DWORD PTR _K$[ebp]
	sub	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 370  : 						k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 371  : 					}

	jmp	SHORT $LN39@cub_9
$LN46@cub_9:

; 372  : 					else {
; 373  : 						J--;

	mov	eax, DWORD PTR _J$[ebp]
	sub	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 374  : 						j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN39@cub_9:

; 375  : 					}
; 376  : 				}
; 377  : 			}
; 378  : 			if (table[0][n - 1] != n * n && flag == 21 && K != 0 && tab[J][K - 1] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN48@cub_9
	cmp	DWORD PTR _flag$[ebp], 21		; 00000015H
	jne	$LN48@cub_9
	cmp	DWORD PTR _K$[ebp], 0
	je	$LN48@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4-4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN48@cub_9

; 379  : 				k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 380  : 				K--;

	mov	eax, DWORD PTR _K$[ebp]
	sub	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 381  : 				////c_8(table, &i, &j, &k);
; 382  : 
; 383  : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 384  : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 385  : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 386  : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 387  : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 388  : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 389  : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 390  : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 391  : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 392  : 
; 393  : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 394  : 				int result = cub_9(table, 11, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	11					; 0000000bH
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$57[ebp], eax

; 395  : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$57[ebp], -1
	jne	$LN48@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN48@cub_9

; 396  : 					////c_88(table, &i, &j, &k);
; 397  : 
; 398  : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 399  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 400  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 401  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 402  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 403  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 404  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 405  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 406  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 407  : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 408  : 
; 409  : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 410  : 					K++;

	mov	eax, DWORD PTR _K$[ebp]
	add	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 411  : 					k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN48@cub_9:

; 412  : 				}
; 413  : 			}
; 414  : 			if (table[0][n - 1] != n * n && flag == 19 || flag == 41) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	SHORT $LN52@cub_9
	cmp	DWORD PTR _flag$[ebp], 19		; 00000013H
	je	SHORT $LN51@cub_9
$LN52@cub_9:
	cmp	DWORD PTR _flag$[ebp], 41		; 00000029H
	jne	$LN50@cub_9
$LN51@cub_9:

; 415  : 				if (table[0][n - 1] != n * n && flag == 19 && K != n / 3 - 1 && tab[J][K + 1] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN53@cub_9
	cmp	DWORD PTR _flag$[ebp], 19		; 00000013H
	jne	$LN53@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	sub	eax, 1
	cmp	DWORD PTR _K$[ebp], eax
	je	$LN53@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4+4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN53@cub_9

; 416  : 					k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 417  : 					K++;

	mov	eax, DWORD PTR _K$[ebp]
	add	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 418  : 					////c_3(table, &i, &j, &k);
; 419  : 
; 420  : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 421  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 422  : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 423  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 424  : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 425  : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 426  : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 427  : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 428  : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 429  : 
; 430  : 				}

	jmp	$LN54@cub_9
$LN53@cub_9:

; 431  : 				else if (j != 0 && J != 0 && tab[J - 1][K] - tab[J][K] == 1) {

	cmp	DWORD PTR _j$[ebp], 0
	je	$LN54@cub_9
	cmp	DWORD PTR _J$[ebp], 0
	je	$LN54@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN54@cub_9

; 432  : 					j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 433  : 					J--;

	mov	eax, DWORD PTR _J$[ebp]
	sub	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 434  : 					////c_3(table, &i, &j, &k);
; 435  : 
; 436  : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 437  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 438  : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 439  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 440  : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 441  : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 442  : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 443  : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 444  : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN54@cub_9:

; 445  : 
; 446  : 				}
; 447  : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 448  : 				f = flag;

	mov	eax, DWORD PTR _flag$[ebp]
	mov	DWORD PTR _f$[ebp], eax

; 449  : 				int result = cub_9(table, 49, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	49					; 00000031H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$56[ebp], eax

; 450  : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$56[ebp], -1
	jne	$LN50@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN50@cub_9

; 451  : 					////c_33(table, &i, &j, &k);
; 452  : 
; 453  : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 454  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 455  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 456  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 457  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 458  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 459  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 460  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 461  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 462  : 
; 463  : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 464  : 
; 465  : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 466  : 					if (f == 19) {

	cmp	DWORD PTR _f$[ebp], 19			; 00000013H
	jne	SHORT $LN57@cub_9

; 467  : 						K--;

	mov	eax, DWORD PTR _K$[ebp]
	sub	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 468  : 						k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 469  : 					}

	jmp	SHORT $LN50@cub_9
$LN57@cub_9:

; 470  : 					else {
; 471  : 						J++;

	mov	eax, DWORD PTR _J$[ebp]
	add	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 472  : 						j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN50@cub_9:

; 473  : 					}
; 474  : 				}
; 475  : 			}
; 476  : 			if (table[0][n - 1] != n * n && flag == 49 && K != n / 3 - 1 && tab[J][K + 1] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN59@cub_9
	cmp	DWORD PTR _flag$[ebp], 49		; 00000031H
	jne	$LN59@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	sub	eax, 1
	cmp	DWORD PTR _K$[ebp], eax
	je	$LN59@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4+4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN59@cub_9

; 477  : 				k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 478  : 				K++;

	mov	eax, DWORD PTR _K$[ebp]
	add	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 479  : 				////c_3(table, &i, &j, &k);
; 480  : 
; 481  : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 482  : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 483  : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 484  : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 485  : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 486  : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 487  : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 488  : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 489  : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 490  : 
; 491  : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 492  : 				int result = cub_9(table, 39, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	39					; 00000027H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$55[ebp], eax

; 493  : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$55[ebp], -1
	jne	$LN59@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN59@cub_9

; 494  : 					////c_33(table, &i, &j, &k);
; 495  : 
; 496  : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 497  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 498  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 499  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 500  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 501  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 502  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 503  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 504  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 505  : 
; 506  : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 507  : 
; 508  : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 509  : 					k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 510  : 					K--;

	mov	eax, DWORD PTR _K$[ebp]
	sub	eax, 1
	mov	DWORD PTR _K$[ebp], eax
$LN59@cub_9:

; 511  : 				}
; 512  : 			}
; 513  : 			if (table[0][n - 1] != n * n && flag == 19 || flag == 41) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	SHORT $LN63@cub_9
	cmp	DWORD PTR _flag$[ebp], 19		; 00000013H
	je	SHORT $LN62@cub_9
$LN63@cub_9:
	cmp	DWORD PTR _flag$[ebp], 41		; 00000029H
	jne	$LN61@cub_9
$LN62@cub_9:

; 514  : 				if (table[0][n - 1] != n * n && flag == 19 && K != n / 3 - 1 && tab[J][K + 1] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN64@cub_9
	cmp	DWORD PTR _flag$[ebp], 19		; 00000013H
	jne	$LN64@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	sub	eax, 1
	cmp	DWORD PTR _K$[ebp], eax
	je	$LN64@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4+4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN64@cub_9

; 515  : 					k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 516  : 					K++;

	mov	eax, DWORD PTR _K$[ebp]
	add	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 517  : 					////c_5(table, &i, &j, &k);
; 518  : 
; 519  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 520  : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 521  : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 522  : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 523  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 524  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 525  : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 526  : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 527  : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 528  : 
; 529  : 				}

	jmp	$LN65@cub_9
$LN64@cub_9:

; 530  : 				else if (j != 0 && J != 0 && tab[J - 1][K] - tab[J][K] == 1) {

	cmp	DWORD PTR _j$[ebp], 0
	je	$LN65@cub_9
	cmp	DWORD PTR _J$[ebp], 0
	je	$LN65@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN65@cub_9

; 531  : 					j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 532  : 					J--;

	mov	eax, DWORD PTR _J$[ebp]
	sub	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 533  : 					////c_5(table, &i, &j, &k);
; 534  : 
; 535  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 536  : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 537  : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 538  : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 539  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 540  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 541  : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 542  : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 543  : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN65@cub_9:

; 544  : 
; 545  : 				}
; 546  : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 547  : 				f = flag;

	mov	eax, DWORD PTR _flag$[ebp]
	mov	DWORD PTR _f$[ebp], eax

; 548  : 				int result = cub_9(table, 11, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	11					; 0000000bH
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$54[ebp], eax

; 549  : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$54[ebp], -1
	jne	$LN61@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN61@cub_9

; 550  : 					////c_55(table, &i, &j, &k);
; 551  : 
; 552  : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 553  : 
; 554  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 555  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 556  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 557  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 558  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 559  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 560  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 561  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 562  : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 563  : 
; 564  : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 565  : 					if (f == 19) {

	cmp	DWORD PTR _f$[ebp], 19			; 00000013H
	jne	SHORT $LN68@cub_9

; 566  : 						K--;

	mov	eax, DWORD PTR _K$[ebp]
	sub	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 567  : 						k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 568  : 					}

	jmp	SHORT $LN61@cub_9
$LN68@cub_9:

; 569  : 					else {
; 570  : 						J++;

	mov	eax, DWORD PTR _J$[ebp]
	add	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 571  : 						j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN61@cub_9:

; 572  : 					}
; 573  : 				}
; 574  : 			}
; 575  : 			if (table[0][n - 1] != n * n && flag == 11 && J != 0 && tab[J - 1][K] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN70@cub_9
	cmp	DWORD PTR _flag$[ebp], 11		; 0000000bH
	jne	$LN70@cub_9
	cmp	DWORD PTR _J$[ebp], 0
	je	$LN70@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN70@cub_9

; 576  : 				j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 577  : 				J--;

	mov	eax, DWORD PTR _J$[ebp]
	sub	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 578  : 				////c_5(table, &i, &j, &k);
; 579  : 
; 580  : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 581  : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 582  : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 583  : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 584  : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 585  : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 586  : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 587  : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 588  : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 589  : 
; 590  : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 591  : 				int result = cub_9(table, 21, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$53[ebp], eax

; 592  : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$53[ebp], -1
	jne	$LN70@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN70@cub_9

; 593  : 					////c_55(table, &i, &j, &k);
; 594  : 
; 595  : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 596  : 
; 597  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 598  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 599  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 600  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 601  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 602  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 603  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 604  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 605  : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 606  : 
; 607  : 					j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 608  : 					J++;

	mov	eax, DWORD PTR _J$[ebp]
	add	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 609  : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx
$LN70@cub_9:

; 610  : 				}
; 611  : 			}
; 612  : 			if (table[0][n - 1] != n * n && flag == 43 || flag == 37) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	SHORT $LN74@cub_9
	cmp	DWORD PTR _flag$[ebp], 43		; 0000002bH
	je	SHORT $LN73@cub_9
$LN74@cub_9:
	cmp	DWORD PTR _flag$[ebp], 37		; 00000025H
	jne	$LN72@cub_9
$LN73@cub_9:

; 613  : 				if (table[0][n - 1] != n * n && flag == 37 && K != 0 && tab[J][K - 1] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN75@cub_9
	cmp	DWORD PTR _flag$[ebp], 37		; 00000025H
	jne	$LN75@cub_9
	cmp	DWORD PTR _K$[ebp], 0
	je	$LN75@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4-4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN75@cub_9

; 614  : 					k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 615  : 					K--;

	mov	eax, DWORD PTR _K$[ebp]
	sub	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 616  : 					////c_6(table, &i, &j, &k);
; 617  : 
; 618  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 619  : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 620  : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 621  : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 622  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 623  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 624  : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 625  : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 626  : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 627  : 
; 628  : 				}

	jmp	$LN76@cub_9
$LN75@cub_9:

; 629  : 				else if (j != 0 && J != 0 && tab[J - 1][K] - tab[J][K] == 1) {

	cmp	DWORD PTR _j$[ebp], 0
	je	$LN76@cub_9
	cmp	DWORD PTR _J$[ebp], 0
	je	$LN76@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN76@cub_9

; 630  : 					j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 631  : 					J--;

	mov	eax, DWORD PTR _J$[ebp]
	sub	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 632  : 					////c_6(table, &i, &j, &k);
; 633  : 
; 634  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 635  : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 636  : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 637  : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 638  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 639  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 640  : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 641  : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 642  : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN76@cub_9:

; 643  : 
; 644  : 				}
; 645  : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 646  : 				f = flag;

	mov	eax, DWORD PTR _flag$[ebp]
	mov	DWORD PTR _f$[ebp], eax

; 647  : 				int result = cub_9(table, 33, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	33					; 00000021H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$52[ebp], eax

; 648  : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$52[ebp], -1
	jne	$LN72@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN72@cub_9

; 649  : 					////c_66(table, &i, &j, &k);
; 650  : 
; 651  : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 652  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 653  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 654  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 655  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 656  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 657  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 658  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 659  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 660  : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 661  : 
; 662  : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 663  : 					if (f == 37) {

	cmp	DWORD PTR _f$[ebp], 37			; 00000025H
	jne	SHORT $LN79@cub_9

; 664  : 						K++;

	mov	eax, DWORD PTR _K$[ebp]
	add	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 665  : 						k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 666  : 					}

	jmp	SHORT $LN72@cub_9
$LN79@cub_9:

; 667  : 					else {
; 668  : 						J++;

	mov	eax, DWORD PTR _J$[ebp]
	add	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 669  : 						j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN72@cub_9:

; 670  : 					}
; 671  : 				}
; 672  : 			}
; 673  : 			if (table[0][n - 1] != n * n && flag == 33 && J != 0 && tab[J - 1][K] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN81@cub_9
	cmp	DWORD PTR _flag$[ebp], 33		; 00000021H
	jne	$LN81@cub_9
	cmp	DWORD PTR _J$[ebp], 0
	je	$LN81@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN81@cub_9

; 674  : 				j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 675  : 				J--;

	mov	eax, DWORD PTR _J$[ebp]
	sub	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 676  : 				////c_6(table, &i, &j, &k);
; 677  : 
; 678  : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 679  : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 680  : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 681  : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 682  : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 683  : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 684  : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 685  : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 686  : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 687  : 
; 688  : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 689  : 				int result = cub_9(table, 23, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	23					; 00000017H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$51[ebp], eax

; 690  : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$51[ebp], -1
	jne	$LN81@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN81@cub_9

; 691  : 					////c_66(table, &i, &j, &k);
; 692  : 
; 693  : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 694  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 695  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 696  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 697  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 698  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 699  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 700  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 701  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 702  : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 703  : 
; 704  : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 705  : 					j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 706  : 					J++;

	mov	eax, DWORD PTR _J$[ebp]
	add	eax, 1
	mov	DWORD PTR _J$[ebp], eax
$LN81@cub_9:

; 707  : 				}
; 708  : 			}
; 709  : 			if (table[0][n - 1] != n * n && flag == 43 || flag == 37) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	SHORT $LN85@cub_9
	cmp	DWORD PTR _flag$[ebp], 43		; 0000002bH
	je	SHORT $LN84@cub_9
$LN85@cub_9:
	cmp	DWORD PTR _flag$[ebp], 37		; 00000025H
	jne	$LN83@cub_9
$LN84@cub_9:

; 710  : 				if (table[0][n - 1] != n * n && flag == 37 && K != 0 && tab[J][K - 1] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN86@cub_9
	cmp	DWORD PTR _flag$[ebp], 37		; 00000025H
	jne	$LN86@cub_9
	cmp	DWORD PTR _K$[ebp], 0
	je	$LN86@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4-4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN86@cub_9

; 711  : 					k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 712  : 					K--;

	mov	eax, DWORD PTR _K$[ebp]
	sub	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 713  : 					////c_7(table, &i, &j, &k);
; 714  : 
; 715  : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 716  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 717  : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 718  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 719  : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 720  : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 721  : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 722  : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 723  : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 724  : 
; 725  : 				}

	jmp	$LN87@cub_9
$LN86@cub_9:

; 726  : 				else if (j != 0 && J != 0 && tab[J - 1][K] - tab[J][K] == 1) {

	cmp	DWORD PTR _j$[ebp], 0
	je	$LN87@cub_9
	cmp	DWORD PTR _J$[ebp], 0
	je	$LN87@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN87@cub_9

; 727  : 					j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 728  : 					J--;

	mov	eax, DWORD PTR _J$[ebp]
	sub	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 729  : 					////c_7(table, &i, &j, &k);
; 730  : 
; 731  : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 732  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 733  : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 734  : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 735  : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 736  : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 737  : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 738  : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 739  : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN87@cub_9:

; 740  : 
; 741  : 				}
; 742  : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 743  : 				f = flag;

	mov	eax, DWORD PTR _flag$[ebp]
	mov	DWORD PTR _f$[ebp], eax

; 744  : 				int result = cub_9(table, 47, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	47					; 0000002fH
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$50[ebp], eax

; 745  : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$50[ebp], -1
	jne	$LN83@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN83@cub_9

; 746  : 					////c_77(table, &i, &j, &k);
; 747  : 
; 748  : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 749  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 750  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 751  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 752  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 753  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 754  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 755  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 756  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 757  : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 758  : 
; 759  : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 760  : 					if (f == 37) {

	cmp	DWORD PTR _f$[ebp], 37			; 00000025H
	jne	SHORT $LN90@cub_9

; 761  : 						K++;

	mov	eax, DWORD PTR _K$[ebp]
	add	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 762  : 						k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 763  : 					}

	jmp	SHORT $LN83@cub_9
$LN90@cub_9:

; 764  : 					else {
; 765  : 						J++;

	mov	eax, DWORD PTR _J$[ebp]
	add	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 766  : 						j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN83@cub_9:

; 767  : 					}
; 768  : 				}
; 769  : 			}
; 770  : 			if (table[0][n - 1] != n * n && flag == 47 && K != 0 && tab[J][K - 1] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN92@cub_9
	cmp	DWORD PTR _flag$[ebp], 47		; 0000002fH
	jne	$LN92@cub_9
	cmp	DWORD PTR _K$[ebp], 0
	je	$LN92@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4-4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN92@cub_9

; 771  : 				k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 772  : 				K--;

	mov	eax, DWORD PTR _K$[ebp]
	sub	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 773  : 				////c_7(table, &i, &j, &k);
; 774  : 
; 775  : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 776  : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 777  : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 778  : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 779  : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 780  : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 781  : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 782  : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 783  : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 784  : 
; 785  : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 786  : 				int result = cub_9(table, 17, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$49[ebp], eax

; 787  : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$49[ebp], -1
	jne	$LN92@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN92@cub_9

; 788  : 					////c_77(table, &i, &j, &k);
; 789  : 
; 790  : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 791  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 792  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 793  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 794  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 795  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 796  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 797  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 798  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 799  : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 800  : 
; 801  : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 802  : 					k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 803  : 					K++;

	mov	eax, DWORD PTR _K$[ebp]
	add	eax, 1
	mov	DWORD PTR _K$[ebp], eax
$LN92@cub_9:

; 804  : 				}
; 805  : 			}
; 806  : 
; 807  : 			//çèãçàãè
; 808  : 			if (table[0][n - 1] != n * n && flag == 17 && J != n / 3 - 1 && tab[J + 1][K] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN94@cub_9
	cmp	DWORD PTR _flag$[ebp], 17		; 00000011H
	jne	$LN94@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	sub	eax, 1
	cmp	DWORD PTR _J$[ebp], eax
	je	$LN94@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN94@cub_9

; 809  : 				j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 810  : 				J++;

	mov	eax, DWORD PTR _J$[ebp]
	add	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 811  : 				//zzHOR_1(table, &i, &j, &k);
; 812  : 
; 813  : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 814  : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 815  : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 816  : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 817  : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 818  : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 819  : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 820  : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 821  : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 822  : 
; 823  : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 824  : 				int result = cub_9(table, 39, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	39					; 00000027H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$48[ebp], eax

; 825  : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$48[ebp], -1
	jne	$LN94@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN94@cub_9

; 826  : 					////zzHOR_11(table, &i, &j, &k);
; 827  : 
; 828  : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 829  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 830  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 831  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 832  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 833  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 834  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 835  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 836  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 837  : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 838  : 
; 839  : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 840  : 					j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 841  : 					J--;

	mov	eax, DWORD PTR _J$[ebp]
	sub	eax, 1
	mov	DWORD PTR _J$[ebp], eax
$LN94@cub_9:

; 842  : 				}
; 843  : 			}
; 844  : 			if (table[0][n - 1] != n * n && flag == 11 && J != 0 && tab[J - 1][K] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN96@cub_9
	cmp	DWORD PTR _flag$[ebp], 11		; 0000000bH
	jne	$LN96@cub_9
	cmp	DWORD PTR _J$[ebp], 0
	je	$LN96@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN96@cub_9

; 845  : 				j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 846  : 				J--;

	mov	eax, DWORD PTR _J$[ebp]
	sub	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 847  : 				//zzHOR_2(table, &i, &j, &k);
; 848  : 
; 849  : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 850  : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 851  : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 852  : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 853  : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 854  : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 855  : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 856  : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 857  : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 858  : 
; 859  : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 860  : 				int result = cub_9(table, 33, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	33					; 00000021H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$47[ebp], eax

; 861  : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$47[ebp], -1
	jne	$LN96@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN96@cub_9

; 862  : 					//zzHOR_22(table, &i, &j, &k);
; 863  : 
; 864  : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 865  : 
; 866  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 867  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 868  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 869  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 870  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 871  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 872  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 873  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 874  : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 875  : 
; 876  : 					j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 877  : 					J++;

	mov	eax, DWORD PTR _J$[ebp]
	add	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 878  : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx
$LN96@cub_9:

; 879  : 				}
; 880  : 			}
; 881  : 			if (table[0][n - 1] != n * n && flag == 33 && J != 0 && tab[J - 1][K] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN98@cub_9
	cmp	DWORD PTR _flag$[ebp], 33		; 00000021H
	jne	$LN98@cub_9
	cmp	DWORD PTR _J$[ebp], 0
	je	$LN98@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN98@cub_9

; 882  : 				j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 883  : 				J--;

	mov	eax, DWORD PTR _J$[ebp]
	sub	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 884  : 				//zzHOR_3(table, &i, &j, &k);
; 885  : 
; 886  : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 887  : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 888  : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 889  : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 890  : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 891  : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 892  : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 893  : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 894  : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 895  : 
; 896  : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 897  : 				int result = cub_9(table, 11, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	11					; 0000000bH
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$46[ebp], eax

; 898  : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$46[ebp], -1
	jne	$LN98@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN98@cub_9

; 899  : 					//zzHOR_33(table, &i, &j, &k);
; 900  : 
; 901  : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 902  : 
; 903  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 904  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 905  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 906  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 907  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 908  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 909  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 910  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 911  : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 912  : 
; 913  : 					j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 914  : 					J++;

	mov	eax, DWORD PTR _J$[ebp]
	add	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 915  : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx
$LN98@cub_9:

; 916  : 				}
; 917  : 			}
; 918  : 			if (table[0][n - 1] != n * n && flag == 39 && J != n / 3 - 1 && tab[J + 1][K] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN100@cub_9
	cmp	DWORD PTR _flag$[ebp], 39		; 00000027H
	jne	$LN100@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	sub	eax, 1
	cmp	DWORD PTR _J$[ebp], eax
	je	$LN100@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN100@cub_9

; 919  : 				j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 920  : 				J++;

	mov	eax, DWORD PTR _J$[ebp]
	add	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 921  : 				//zzHOR_4(table, &i, &j, &k);
; 922  : 
; 923  : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 924  : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 925  : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 926  : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 927  : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 928  : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 929  : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 930  : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 931  : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 932  : 
; 933  : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 934  : 				int result = cub_9(table, 17, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$45[ebp], eax

; 935  : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$45[ebp], -1
	jne	$LN100@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN100@cub_9

; 936  : 					//zzHOR_44(table, &i, &j, &k);
; 937  : 
; 938  : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 939  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 940  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 941  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 942  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 943  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 944  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 945  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 946  : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 947  : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 948  : 
; 949  : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 950  : 					j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 951  : 					J--;

	mov	eax, DWORD PTR _J$[ebp]
	sub	eax, 1
	mov	DWORD PTR _J$[ebp], eax
$LN100@cub_9:

; 952  : 				}
; 953  : 			}
; 954  : 			if (table[0][n - 1] != n * n && flag == 23 && K != n / 3 - 1 && tab[J][K + 1] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN102@cub_9
	cmp	DWORD PTR _flag$[ebp], 23		; 00000017H
	jne	$LN102@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	sub	eax, 1
	cmp	DWORD PTR _K$[ebp], eax
	je	$LN102@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4+4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN102@cub_9

; 955  : 				k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 956  : 				K++;

	mov	eax, DWORD PTR _K$[ebp]
	add	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 957  : 				//zzVER_1(table, &i, &j, &k);
; 958  : 
; 959  : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 960  : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 961  : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 962  : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 963  : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 964  : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 965  : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 966  : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 967  : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 968  : 
; 969  : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 970  : 				int result = cub_9(table, 49, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	49					; 00000031H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$44[ebp], eax

; 971  : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$44[ebp], -1
	jne	$LN102@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN102@cub_9

; 972  : 					//zzVER_11(table, &i, &j, &k);
; 973  : 
; 974  : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 975  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 976  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 977  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 978  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 979  : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 980  : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 981  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 982  : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 983  : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 984  : 
; 985  : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 986  : 					k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 987  : 					K--;

	mov	eax, DWORD PTR _K$[ebp]
	sub	eax, 1
	mov	DWORD PTR _K$[ebp], eax
$LN102@cub_9:

; 988  : 				}
; 989  : 			}
; 990  : 			if (table[0][n - 1] != n * n && flag == 49 && K != n / 3 - 1 && tab[J][K + 1] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN104@cub_9
	cmp	DWORD PTR _flag$[ebp], 49		; 00000031H
	jne	$LN104@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	sub	eax, 1
	cmp	DWORD PTR _K$[ebp], eax
	je	$LN104@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4+4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN104@cub_9

; 991  : 				k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 992  : 				K++;

	mov	eax, DWORD PTR _K$[ebp]
	add	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 993  : 				//zzVER_2(table, &i, &j, &k);
; 994  : 
; 995  : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 996  : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 997  : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 998  : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 999  : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1000 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1001 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1002 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1003 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1004 : 
; 1005 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1006 : 				int result = cub_9(table, 23, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	23					; 00000017H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$43[ebp], eax

; 1007 : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$43[ebp], -1
	jne	$LN104@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN104@cub_9

; 1008 : 					//zzVER_22(table, &i, &j, &k);
; 1009 : 
; 1010 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 1011 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1012 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1013 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1014 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1015 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1016 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1017 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1018 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1019 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 1020 : 
; 1021 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1022 : 					k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 1023 : 					K--;

	mov	eax, DWORD PTR _K$[ebp]
	sub	eax, 1
	mov	DWORD PTR _K$[ebp], eax
$LN104@cub_9:

; 1024 : 				}
; 1025 : 			}
; 1026 : 			if (table[0][n - 1] != n * n && flag == 47 && K != 0 && tab[J][K - 1] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN106@cub_9
	cmp	DWORD PTR _flag$[ebp], 47		; 0000002fH
	jne	$LN106@cub_9
	cmp	DWORD PTR _K$[ebp], 0
	je	$LN106@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4-4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN106@cub_9

; 1027 : 				k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 1028 : 				K--;

	mov	eax, DWORD PTR _K$[ebp]
	sub	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 1029 : 				//zzVER_3(table, &i, &j, &k);
; 1030 : 
; 1031 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1032 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1033 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1034 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1035 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1036 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1037 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1038 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1039 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1040 : 
; 1041 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1042 : 				int result = cub_9(table, 21, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$42[ebp], eax

; 1043 : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$42[ebp], -1
	jne	$LN106@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN106@cub_9

; 1044 : 					//zzVER_33(table, &i, &j, &k);
; 1045 : 
; 1046 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 1047 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1048 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1049 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1050 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1051 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1052 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1053 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1054 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1055 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 1056 : 
; 1057 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1058 : 					k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 1059 : 					K++;

	mov	eax, DWORD PTR _K$[ebp]
	add	eax, 1
	mov	DWORD PTR _K$[ebp], eax
$LN106@cub_9:

; 1060 : 				}
; 1061 : 			}
; 1062 : 			if (table[0][n - 1] != n * n && flag == 21 && K != 0 && tab[J][K - 1] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN108@cub_9
	cmp	DWORD PTR _flag$[ebp], 21		; 00000015H
	jne	$LN108@cub_9
	cmp	DWORD PTR _K$[ebp], 0
	je	$LN108@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4-4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN108@cub_9

; 1063 : 				k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 1064 : 				K--;

	mov	eax, DWORD PTR _K$[ebp]
	sub	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 1065 : 				//zzVER_4(table, &i, &j, &k);
; 1066 : 
; 1067 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1068 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1069 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1070 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1071 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1072 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1073 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1074 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1075 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1076 : 
; 1077 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1078 : 				int result = cub_9(table, 47, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	47					; 0000002fH
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$41[ebp], eax

; 1079 : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$41[ebp], -1
	jne	$LN108@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN108@cub_9

; 1080 : 					//zzVER_44(table, &i, &j, &k);
; 1081 : 
; 1082 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 1083 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1084 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1085 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1086 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1087 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1088 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1089 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1090 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1091 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 1092 : 
; 1093 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1094 : 					k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 1095 : 					K++;

	mov	eax, DWORD PTR _K$[ebp]
	add	eax, 1
	mov	DWORD PTR _K$[ebp], eax
$LN108@cub_9:

; 1096 : 				}
; 1097 : 			}
; 1098 : 
; 1099 : 			//îáõîäíûå 
; 1100 : 			if (table[0][n - 1] != n * n && flag == 49 && K != n / 3 - 1 && tab[J][K + 1] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN110@cub_9
	cmp	DWORD PTR _flag$[ebp], 49		; 00000031H
	jne	$LN110@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	sub	eax, 1
	cmp	DWORD PTR _K$[ebp], eax
	je	$LN110@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4+4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN110@cub_9

; 1101 : 				k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 1102 : 				K++;

	mov	eax, DWORD PTR _K$[ebp]
	add	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 1103 : 				//o_1(table, &i, &j, &k);
; 1104 : 
; 1105 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1106 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1107 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1108 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1109 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1110 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1111 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1112 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1113 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1114 : 
; 1115 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1116 : 				int result = cub_9(table, 11, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	11					; 0000000bH
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$40[ebp], eax

; 1117 : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$40[ebp], -1
	jne	$LN110@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN110@cub_9

; 1118 : 					//o_11(table, &i, &j, &k);
; 1119 : 
; 1120 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 1121 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1122 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1123 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1124 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1125 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1126 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1127 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1128 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1129 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 1130 : 
; 1131 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1132 : 					k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 1133 : 					K--;

	mov	eax, DWORD PTR _K$[ebp]
	sub	eax, 1
	mov	DWORD PTR _K$[ebp], eax
$LN110@cub_9:

; 1134 : 				}
; 1135 : 			}
; 1136 : 			if (table[0][n - 1] != n * n && flag == 47 && K != 0 && tab[J][K - 1] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN112@cub_9
	cmp	DWORD PTR _flag$[ebp], 47		; 0000002fH
	jne	$LN112@cub_9
	cmp	DWORD PTR _K$[ebp], 0
	je	$LN112@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4-4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN112@cub_9

; 1137 : 				k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 1138 : 				K--;

	mov	eax, DWORD PTR _K$[ebp]
	sub	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 1139 : 				//o_2(table, &i, &j, &k);
; 1140 : 
; 1141 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1142 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1143 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1144 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1145 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1146 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1147 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1148 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1149 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1150 : 
; 1151 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1152 : 				int result = cub_9(table, 33, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	33					; 00000021H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$39[ebp], eax

; 1153 : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$39[ebp], -1
	jne	$LN112@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN112@cub_9

; 1154 : 					//o_22(table, &i, &j, &k);
; 1155 : 
; 1156 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 1157 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1158 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1159 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1160 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1161 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1162 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1163 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1164 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1165 : 
; 1166 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 1167 : 
; 1168 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1169 : 					k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 1170 : 					K++;

	mov	eax, DWORD PTR _K$[ebp]
	add	eax, 1
	mov	DWORD PTR _K$[ebp], eax
$LN112@cub_9:

; 1171 : 				}
; 1172 : 			}
; 1173 : 			if (table[0][n - 1] != n * n && flag == 33 && J != 0 && tab[J - 1][K] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN114@cub_9
	cmp	DWORD PTR _flag$[ebp], 33		; 00000021H
	jne	$LN114@cub_9
	cmp	DWORD PTR _J$[ebp], 0
	je	$LN114@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN114@cub_9

; 1174 : 				j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 1175 : 				J--;

	mov	eax, DWORD PTR _J$[ebp]
	sub	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 1176 : 				//o_3(table, &i, &j, &k);
; 1177 : 
; 1178 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1179 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1180 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1181 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1182 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1183 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1184 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1185 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1186 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1187 : 
; 1188 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1189 : 				int result = cub_9(table, 47, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	47					; 0000002fH
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$38[ebp], eax

; 1190 : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$38[ebp], -1
	jne	$LN114@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN114@cub_9

; 1191 : 					//o_33(table, &i, &j, &k);
; 1192 : 
; 1193 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 1194 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1195 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1196 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1197 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1198 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1199 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1200 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1201 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1202 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 1203 : 
; 1204 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1205 : 					j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 1206 : 					J++;

	mov	eax, DWORD PTR _J$[ebp]
	add	eax, 1
	mov	DWORD PTR _J$[ebp], eax
$LN114@cub_9:

; 1207 : 				}
; 1208 : 			}
; 1209 : 			if (table[0][n - 1] != n * n && flag == 39 && J != n / 3 - 1 && tab[J + 1][K] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN116@cub_9
	cmp	DWORD PTR _flag$[ebp], 39		; 00000027H
	jne	$LN116@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	sub	eax, 1
	cmp	DWORD PTR _J$[ebp], eax
	je	$LN116@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN116@cub_9

; 1210 : 				j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 1211 : 				J++;

	mov	eax, DWORD PTR _J$[ebp]
	add	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 1212 : 				//o_4(table, &i, &j, &k);
; 1213 : 
; 1214 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1215 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1216 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1217 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1218 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1219 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1220 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1221 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1222 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1223 : 
; 1224 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1225 : 				int result = cub_9(table, 21, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$37[ebp], eax

; 1226 : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$37[ebp], -1
	jne	$LN116@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN116@cub_9

; 1227 : 					//o_44(table, &i, &j, &k);
; 1228 : 
; 1229 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 1230 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1231 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1232 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1233 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1234 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1235 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1236 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1237 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1238 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 1239 : 
; 1240 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1241 : 					j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 1242 : 					J--;

	mov	eax, DWORD PTR _J$[ebp]
	sub	eax, 1
	mov	DWORD PTR _J$[ebp], eax
$LN116@cub_9:

; 1243 : 				}
; 1244 : 			}
; 1245 : 			if (table[0][n - 1] != n * n && flag == 23 && K != n / 3 - 1 && tab[J][K + 1] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN118@cub_9
	cmp	DWORD PTR _flag$[ebp], 23		; 00000017H
	jne	$LN118@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	sub	eax, 1
	cmp	DWORD PTR _K$[ebp], eax
	je	$LN118@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4+4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN118@cub_9

; 1246 : 				k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 1247 : 				K++;

	mov	eax, DWORD PTR _K$[ebp]
	add	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 1248 : 				//o_5(table, &i, &j, &k);
; 1249 : 
; 1250 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1251 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1252 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1253 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1254 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1255 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1256 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1257 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1258 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1259 : 
; 1260 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1261 : 				int result = cub_9(table, 17, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$36[ebp], eax

; 1262 : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$36[ebp], -1
	jne	$LN118@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN118@cub_9

; 1263 : 					//o_55(table, &i, &j, &k);
; 1264 : 
; 1265 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 1266 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1267 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1268 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1269 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1270 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1271 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1272 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1273 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1274 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 1275 : 
; 1276 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1277 : 					k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 1278 : 					K--;

	mov	eax, DWORD PTR _K$[ebp]
	sub	eax, 1
	mov	DWORD PTR _K$[ebp], eax
$LN118@cub_9:

; 1279 : 				}
; 1280 : 			}
; 1281 : 			if (table[0][n - 1] != n * n && flag == 21 && K != 0 && tab[J][K - 1] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN120@cub_9
	cmp	DWORD PTR _flag$[ebp], 21		; 00000015H
	jne	$LN120@cub_9
	cmp	DWORD PTR _K$[ebp], 0
	je	$LN120@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4-4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN120@cub_9

; 1282 : 				k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 1283 : 				K--;

	mov	eax, DWORD PTR _K$[ebp]
	sub	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 1284 : 				//o_6(table, &i, &j, &k);
; 1285 : 
; 1286 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1287 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1288 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1289 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1290 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1291 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1292 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1293 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1294 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1295 : 
; 1296 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1297 : 				int result = cub_9(table, 39, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	39					; 00000027H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$35[ebp], eax

; 1298 : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$35[ebp], -1
	jne	$LN120@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN120@cub_9

; 1299 : 					//o_66(table, &i, &j, &k);
; 1300 : 
; 1301 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 1302 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1303 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1304 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1305 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1306 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1307 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1308 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1309 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1310 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 1311 : 
; 1312 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1313 : 					k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 1314 : 					K++;

	mov	eax, DWORD PTR _K$[ebp]
	add	eax, 1
	mov	DWORD PTR _K$[ebp], eax
$LN120@cub_9:

; 1315 : 				}
; 1316 : 			}
; 1317 : 			if (table[0][n - 1] != n * n && flag == 11 && J != 0 && tab[J - 1][K] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN122@cub_9
	cmp	DWORD PTR _flag$[ebp], 11		; 0000000bH
	jne	$LN122@cub_9
	cmp	DWORD PTR _J$[ebp], 0
	je	$LN122@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN122@cub_9

; 1318 : 				j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 1319 : 				J--;

	mov	eax, DWORD PTR _J$[ebp]
	sub	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 1320 : 				//o_7(table, &i, &j, &k);
; 1321 : 
; 1322 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1323 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1324 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1325 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1326 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1327 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1328 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1329 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1330 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1331 : 
; 1332 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1333 : 				int result = cub_9(table, 49, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	49					; 00000031H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$34[ebp], eax

; 1334 : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$34[ebp], -1
	jne	$LN122@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN122@cub_9

; 1335 : 					//o_77(table, &i, &j, &k);
; 1336 : 
; 1337 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 1338 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1339 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1340 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1341 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1342 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1343 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1344 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1345 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1346 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 1347 : 
; 1348 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1349 : 					J++;

	mov	eax, DWORD PTR _J$[ebp]
	add	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 1350 : 					j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN122@cub_9:

; 1351 : 				}
; 1352 : 			}
; 1353 : 			if (table[0][n - 1] != n * n && flag == 17 && J != n / 3 - 1 && tab[J + 1][K] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN124@cub_9
	cmp	DWORD PTR _flag$[ebp], 17		; 00000011H
	jne	$LN124@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	sub	eax, 1
	cmp	DWORD PTR _J$[ebp], eax
	je	$LN124@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN124@cub_9

; 1354 : 				j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 1355 : 				J++;

	mov	eax, DWORD PTR _J$[ebp]
	add	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 1356 : 				//o_8(table, &i, &j, &k);
; 1357 : 
; 1358 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1359 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1360 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1361 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1362 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1363 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1364 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1365 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1366 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1367 : 
; 1368 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1369 : 				int result = cub_9(table, 23, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	23					; 00000017H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$33[ebp], eax

; 1370 : 				if (result == -1 && table[0][n - 1] != n*n) {

	cmp	DWORD PTR _result$33[ebp], -1
	jne	$LN124@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN124@cub_9

; 1371 : 					//o_88(table, &i, &j, &k);
; 1372 : 
; 1373 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 1374 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1375 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1376 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1377 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1378 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1379 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1380 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1381 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1382 : 
; 1383 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 1384 : 
; 1385 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1386 : 					j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 1387 : 					J--;

	mov	eax, DWORD PTR _J$[ebp]
	sub	eax, 1
	mov	DWORD PTR _J$[ebp], eax
$LN124@cub_9:

; 1388 : 				}
; 1389 : 			}
; 1390 : 		}

	jmp	$LN5@cub_9
$LN4@cub_9:

; 1391 : 
; 1392 : 		//ïîñëåäíèé êâàäðàíò
; 1393 : 		else if (*sum == 9) {

	mov	eax, DWORD PTR _sum$[ebp]
	cmp	DWORD PTR [eax], 9
	jne	$LN5@cub_9

; 1394 : 		if (table[0][n - 1] != n * n && flag == 33 && J != 0 && tab[J - 1][K] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN127@cub_9
	cmp	DWORD PTR _flag$[ebp], 33		; 00000021H
	jne	$LN127@cub_9
	cmp	DWORD PTR _J$[ebp], 0
	je	$LN127@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN127@cub_9

; 1395 : 			j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 1396 : 			J--;

	mov	eax, DWORD PTR _J$[ebp]
	sub	eax, 1
	mov	DWORD PTR _J$[ebp], eax

; 1397 : 			//o_2(table, &i, &j, &k);
; 1398 : 
; 1399 : 			table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1400 : 			table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1401 : 			table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1402 : 			table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1403 : 			table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1404 : 			table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1405 : 			table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1406 : 			table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1407 : 			table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1408 : 
; 1409 : 			flag = 3;

	mov	DWORD PTR _flag$[ebp], 3
$LN127@cub_9:

; 1410 : 		}
; 1411 : 		if (table[0][n - 1] != n * n && flag == 23 && K != n / 3 - 1 && tab[J][K + 1] - tab[J][K] == 1) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN5@cub_9
	cmp	DWORD PTR _flag$[ebp], 23		; 00000017H
	jne	$LN5@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	sub	eax, 1
	cmp	DWORD PTR _K$[ebp], eax
	je	$LN5@cub_9
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _J$[ebp]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	esi, DWORD PTR _K$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4+4]
	sub	edx, DWORD PTR [eax+esi*4]
	cmp	edx, 1
	jne	$LN5@cub_9

; 1412 : 			k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 1413 : 			K++;

	mov	eax, DWORD PTR _K$[ebp]
	add	eax, 1
	mov	DWORD PTR _K$[ebp], eax

; 1414 : 			//o_8(table, &i, &j, &k);
; 1415 : 
; 1416 : 			table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1417 : 			table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1418 : 			table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1419 : 			table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1420 : 			table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1421 : 			table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1422 : 			table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1423 : 			table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1424 : 			table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1425 : 
; 1426 : 			flag = 3;

	mov	DWORD PTR _flag$[ebp], 3
$LN5@cub_9:

; 1427 : 		}
; 1428 : 			}
; 1429 : 	}

	jmp	$LN3@cub_9
$LN2@cub_9:

; 1430 : 
; 1431 : 	//ñòàëî âëîì... ïðîñòî âñòàâëþ 2 ñëó÷àÿ... (((
; 1432 : 	else {
; 1433 : 		if (*sum != 9 && table[0][n - 1] == 0) {

	mov	eax, DWORD PTR _sum$[ebp]
	cmp	DWORD PTR [eax], 9
	je	$LN129@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+ecx*4-4], 0
	jne	$LN129@cub_9

; 1434 : 			//öåíòðîâûe
; 1435 : 			if (table[0][n - 1] != n * n && flag == 13 || flag == 27) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	SHORT $LN133@cub_9
	cmp	DWORD PTR _flag$[ebp], 13		; 0000000dH
	je	SHORT $LN132@cub_9
$LN133@cub_9:
	cmp	DWORD PTR _flag$[ebp], 27		; 0000001bH
	jne	$LN131@cub_9
$LN132@cub_9:

; 1436 : 				if (table[0][n - 1] != n * n && flag == 13 && k != n - 1 && table[j][k + 1] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN134@cub_9
	cmp	DWORD PTR _flag$[ebp], 13		; 0000000dH
	jne	$LN134@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _k$[ebp], eax
	je	$LN134@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4+4], 0
	jne	$LN134@cub_9

; 1437 : 					k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 1438 : 					////c_1(table, &i, &j, &k);
; 1439 : 
; 1440 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1441 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1442 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1443 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1444 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1445 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1446 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1447 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1448 : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1449 : 
; 1450 : 				}

	jmp	$LN135@cub_9
$LN134@cub_9:

; 1451 : 				else if (table[j + 1][k] == 0) {

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jne	$LN135@cub_9

; 1452 : 					j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 1453 : 					////c_1(table, &i, &j, &k);
; 1454 : 
; 1455 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1456 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1457 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1458 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1459 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1460 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1461 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1462 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1463 : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN135@cub_9:

; 1464 : 
; 1465 : 				}
; 1466 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1467 : 				f = flag;

	mov	eax, DWORD PTR _flag$[ebp]
	mov	DWORD PTR _f$[ebp], eax

; 1468 : 				int result = cub_9(table, 17, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$32[ebp], eax

; 1469 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$32[ebp], -1
	jne	$LN131@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN131@cub_9

; 1470 : 					////c_11(table, &i, &j, &k);
; 1471 : 
; 1472 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 1473 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1474 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1475 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1476 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1477 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1478 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1479 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1480 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1481 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 1482 : 
; 1483 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1484 : 					if (f == 13) k--;

	cmp	DWORD PTR _f$[ebp], 13			; 0000000dH
	jne	SHORT $LN138@cub_9
	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax
	jmp	SHORT $LN131@cub_9
$LN138@cub_9:

; 1485 : 					else j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN131@cub_9:

; 1486 : 				}
; 1487 : 			}
; 1488 : 			if (table[0][n - 1] != n * n && flag == 17 && j != n - 1 && table[j + 1][k] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN140@cub_9
	cmp	DWORD PTR _flag$[ebp], 17		; 00000011H
	jne	$LN140@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _j$[ebp], eax
	je	$LN140@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jne	$LN140@cub_9

; 1489 : 				j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 1490 : 				////c_1(table, &i, &j, &k);
; 1491 : 
; 1492 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1493 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1494 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1495 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1496 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1497 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1498 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1499 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1500 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1501 : 
; 1502 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1503 : 				int result = cub_9(table, 47, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	47					; 0000002fH
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$31[ebp], eax

; 1504 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$31[ebp], -1
	jne	$LN140@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN140@cub_9

; 1505 : 					////c_11(table, &i, &j, &k);
; 1506 : 
; 1507 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 1508 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1509 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1510 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1511 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1512 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1513 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1514 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1515 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1516 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 1517 : 
; 1518 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1519 : 					j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN140@cub_9:

; 1520 : 				}
; 1521 : 			}
; 1522 : 			if (table[0][n - 1] != n * n && flag == 13 || flag == 27) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	SHORT $LN144@cub_9
	cmp	DWORD PTR _flag$[ebp], 13		; 0000000dH
	je	SHORT $LN143@cub_9
$LN144@cub_9:
	cmp	DWORD PTR _flag$[ebp], 27		; 0000001bH
	jne	$LN142@cub_9
$LN143@cub_9:

; 1523 : 				if (table[0][n - 1] != n * n && flag == 13 && k != n - 1 && table[j][k + 1] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN145@cub_9
	cmp	DWORD PTR _flag$[ebp], 13		; 0000000dH
	jne	$LN145@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _k$[ebp], eax
	je	$LN145@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4+4], 0
	jne	$LN145@cub_9

; 1524 : 					k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 1525 : 					////c_4(table, &i, &j, &k);
; 1526 : 
; 1527 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1528 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1529 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1530 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1531 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1532 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1533 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1534 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1535 : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1536 : 
; 1537 : 				}

	jmp	$LN146@cub_9
$LN145@cub_9:

; 1538 : 				else if (J != n / 3 - 1 && j != n - 1 && table[j + 1][k] == 0) {

	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	sub	eax, 1
	cmp	DWORD PTR _J$[ebp], eax
	je	$LN146@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _j$[ebp], eax
	je	$LN146@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jne	$LN146@cub_9

; 1539 : 					j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 1540 : 					////c_4(table, &i, &j, &k);
; 1541 : 
; 1542 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1543 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1544 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1545 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1546 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1547 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1548 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1549 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1550 : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN146@cub_9:

; 1551 : 
; 1552 : 				}
; 1553 : 
; 1554 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1555 : 				f = flag;

	mov	eax, DWORD PTR _flag$[ebp]
	mov	DWORD PTR _f$[ebp], eax

; 1556 : 				int result = cub_9(table, 23, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	23					; 00000017H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$30[ebp], eax

; 1557 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$30[ebp], -1
	jne	$LN142@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN142@cub_9

; 1558 : 					////c_44(table, &i, &j, &k);
; 1559 : 
; 1560 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 1561 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1562 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1563 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1564 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1565 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1566 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1567 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1568 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1569 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 1570 : 
; 1571 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1572 : 					if (f == 13) k--;

	cmp	DWORD PTR _f$[ebp], 13			; 0000000dH
	jne	SHORT $LN149@cub_9
	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax
	jmp	SHORT $LN142@cub_9
$LN149@cub_9:

; 1573 : 					else j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN142@cub_9:

; 1574 : 				}
; 1575 : 			}
; 1576 : 			if (table[0][n - 1] != n * n && flag == 23 && k != n - 1 && table[j][k + 1] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN151@cub_9
	cmp	DWORD PTR _flag$[ebp], 23		; 00000017H
	jne	$LN151@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _k$[ebp], eax
	je	$LN151@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4+4], 0
	jne	$LN151@cub_9

; 1577 : 				k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 1578 : 				////c_4(table, &i, &j, &k);
; 1579 : 
; 1580 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1581 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1582 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1583 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1584 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1585 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1586 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1587 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1588 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1589 : 
; 1590 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1591 : 				int result = cub_9(table, 33, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	33					; 00000021H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$29[ebp], eax

; 1592 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$29[ebp], -1
	jne	$LN151@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN151@cub_9

; 1593 : 					////c_44(table, &i, &j, &k);
; 1594 : 
; 1595 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 1596 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1597 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1598 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1599 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1600 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1601 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1602 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1603 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1604 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 1605 : 
; 1606 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1607 : 					k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN151@cub_9:

; 1608 : 				}
; 1609 : 			}
; 1610 : 			if (table[0][n - 1] != n * n && flag == 29 || flag == 31) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	SHORT $LN155@cub_9
	cmp	DWORD PTR _flag$[ebp], 29		; 0000001dH
	je	SHORT $LN154@cub_9
$LN155@cub_9:
	cmp	DWORD PTR _flag$[ebp], 31		; 0000001fH
	jne	$LN153@cub_9
$LN154@cub_9:

; 1611 : 				if (table[0][n - 1] != n * n && flag == 31 && k != 0 && table[j][k - 1] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN156@cub_9
	cmp	DWORD PTR _flag$[ebp], 31		; 0000001fH
	jne	$LN156@cub_9
	cmp	DWORD PTR _k$[ebp], 0
	je	$LN156@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4-4], 0
	jne	$LN156@cub_9

; 1612 : 					k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 1613 : 					////c_2(table, &i, &j, &k);
; 1614 : 
; 1615 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1616 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1617 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1618 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1619 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1620 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1621 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1622 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1623 : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1624 : 
; 1625 : 				}

	jmp	$LN157@cub_9
$LN156@cub_9:

; 1626 : 				else if (J != n / 3 - 1 && j != n - 1 && table[j + 1][k] == 0) {

	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	sub	eax, 1
	cmp	DWORD PTR _J$[ebp], eax
	je	$LN157@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _j$[ebp], eax
	je	$LN157@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jne	$LN157@cub_9

; 1627 : 					j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 1628 : 					////c_2(table, &i, &j, &k);
; 1629 : 
; 1630 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1631 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1632 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1633 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1634 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1635 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1636 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1637 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1638 : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN157@cub_9:

; 1639 : 
; 1640 : 				}
; 1641 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1642 : 				f = flag;

	mov	eax, DWORD PTR _flag$[ebp]
	mov	DWORD PTR _f$[ebp], eax

; 1643 : 				int result = cub_9(table, 39, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	39					; 00000027H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$28[ebp], eax

; 1644 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$28[ebp], -1
	jne	$LN153@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN153@cub_9

; 1645 : 					////c_22(table, &i, &j, &k);
; 1646 : 
; 1647 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 1648 : 
; 1649 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1650 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1651 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1652 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1653 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1654 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1655 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1656 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1657 : 
; 1658 : 
; 1659 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 1660 : 
; 1661 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1662 : 					if (f == 31) k++;

	cmp	DWORD PTR _f$[ebp], 31			; 0000001fH
	jne	SHORT $LN160@cub_9
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
	jmp	SHORT $LN153@cub_9
$LN160@cub_9:

; 1663 : 					else j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN153@cub_9:

; 1664 : 				}
; 1665 : 			}
; 1666 : 			if (table[0][n - 1] != n * n && flag == 39 && j != n - 1 && table[j + 1][k] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN162@cub_9
	cmp	DWORD PTR _flag$[ebp], 39		; 00000027H
	jne	$LN162@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _j$[ebp], eax
	je	$LN162@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jne	$LN162@cub_9

; 1667 : 				j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 1668 : 				////c_2(table, &i, &j, &k);
; 1669 : 
; 1670 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1671 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1672 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1673 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1674 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1675 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1676 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1677 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1678 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1679 : 
; 1680 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1681 : 				int result = cub_9(table, 49, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	49					; 00000031H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$27[ebp], eax

; 1682 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$27[ebp], -1
	jne	$LN162@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN162@cub_9

; 1683 : 					////c_22(table, &i, &j, &k);
; 1684 : 
; 1685 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 1686 : 
; 1687 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1688 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1689 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1690 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1691 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1692 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1693 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1694 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1695 : 
; 1696 : 
; 1697 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 1698 : 
; 1699 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1700 : 					j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN162@cub_9:

; 1701 : 				}
; 1702 : 			}
; 1703 : 			if (table[0][n - 1] != n * n && flag == 29 || flag == 31) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	SHORT $LN166@cub_9
	cmp	DWORD PTR _flag$[ebp], 29		; 0000001dH
	je	SHORT $LN165@cub_9
$LN166@cub_9:
	cmp	DWORD PTR _flag$[ebp], 31		; 0000001fH
	jne	$LN164@cub_9
$LN165@cub_9:

; 1704 : 				if (table[0][n - 1] != n * n && flag == 31 && k != 0 && table[j][k - 1] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN167@cub_9
	cmp	DWORD PTR _flag$[ebp], 31		; 0000001fH
	jne	$LN167@cub_9
	cmp	DWORD PTR _k$[ebp], 0
	je	$LN167@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4-4], 0
	jne	$LN167@cub_9

; 1705 : 					k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 1706 : 					////c_8(table, &i, &j, &k);
; 1707 : 
; 1708 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1709 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1710 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1711 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1712 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1713 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1714 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1715 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1716 : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1717 : 
; 1718 : 				}

	jmp	$LN168@cub_9
$LN167@cub_9:

; 1719 : 				else if (table[j + 1][k] == 0) {

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jne	$LN168@cub_9

; 1720 : 					j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 1721 : 					////c_8(table, &i, &j, &k);
; 1722 : 
; 1723 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1724 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1725 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1726 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1727 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1728 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1729 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1730 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1731 : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN168@cub_9:

; 1732 : 
; 1733 : 				}
; 1734 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1735 : 				f = flag;

	mov	eax, DWORD PTR _flag$[ebp]
	mov	DWORD PTR _f$[ebp], eax

; 1736 : 				int result = cub_9(table, 21, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$26[ebp], eax

; 1737 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$26[ebp], -1
	jne	$LN164@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN164@cub_9

; 1738 : 					////c_88(table, &i, &j, &k);
; 1739 : 
; 1740 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 1741 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1742 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1743 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1744 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1745 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1746 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1747 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1748 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1749 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 1750 : 
; 1751 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1752 : 					if (f == 31) k++;

	cmp	DWORD PTR _f$[ebp], 31			; 0000001fH
	jne	SHORT $LN171@cub_9
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
	jmp	SHORT $LN164@cub_9
$LN171@cub_9:

; 1753 : 					else j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN164@cub_9:

; 1754 : 				}
; 1755 : 			}
; 1756 : 			if (table[0][n - 1] != n * n && flag == 21 && k != 0 && table[j][k - 1] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN173@cub_9
	cmp	DWORD PTR _flag$[ebp], 21		; 00000015H
	jne	$LN173@cub_9
	cmp	DWORD PTR _k$[ebp], 0
	je	$LN173@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4-4], 0
	jne	$LN173@cub_9

; 1757 : 				k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 1758 : 				////c_8(table, &i, &j, &k);
; 1759 : 
; 1760 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1761 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1762 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1763 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1764 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1765 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1766 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1767 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1768 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1769 : 
; 1770 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1771 : 				int result = cub_9(table, 11, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	11					; 0000000bH
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$25[ebp], eax

; 1772 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$25[ebp], -1
	jne	$LN173@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN173@cub_9

; 1773 : 					////c_88(table, &i, &j, &k);
; 1774 : 
; 1775 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 1776 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1777 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1778 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1779 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1780 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1781 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1782 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1783 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1784 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 1785 : 
; 1786 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1787 : 					k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN173@cub_9:

; 1788 : 				}
; 1789 : 			}
; 1790 : 			if (table[0][n - 1] != n * n && flag == 19 || flag == 41) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	SHORT $LN177@cub_9
	cmp	DWORD PTR _flag$[ebp], 19		; 00000013H
	je	SHORT $LN176@cub_9
$LN177@cub_9:
	cmp	DWORD PTR _flag$[ebp], 41		; 00000029H
	jne	$LN175@cub_9
$LN176@cub_9:

; 1791 : 				if (table[0][n - 1] != n * n && flag == 19 && k != n - 1 && table[j][k + 1] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN178@cub_9
	cmp	DWORD PTR _flag$[ebp], 19		; 00000013H
	jne	$LN178@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _k$[ebp], eax
	je	$LN178@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4+4], 0
	jne	$LN178@cub_9

; 1792 : 					k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 1793 : 					////c_3(table, &i, &j, &k);
; 1794 : 
; 1795 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1796 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1797 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1798 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1799 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1800 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1801 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1802 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1803 : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1804 : 
; 1805 : 				}

	jmp	$LN179@cub_9
$LN178@cub_9:

; 1806 : 				else if (j != 0 && table[j - 1][k] == 0) {

	cmp	DWORD PTR _j$[ebp], 0
	je	$LN179@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jne	$LN179@cub_9

; 1807 : 					j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 1808 : 					////c_3(table, &i, &j, &k);
; 1809 : 
; 1810 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1811 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1812 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1813 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1814 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1815 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1816 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1817 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1818 : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN179@cub_9:

; 1819 : 
; 1820 : 				}
; 1821 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1822 : 				f = flag;

	mov	eax, DWORD PTR _flag$[ebp]
	mov	DWORD PTR _f$[ebp], eax

; 1823 : 				int result = cub_9(table, 49, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	49					; 00000031H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$24[ebp], eax

; 1824 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$24[ebp], -1
	jne	$LN175@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN175@cub_9

; 1825 : 					////c_33(table, &i, &j, &k);
; 1826 : 
; 1827 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 1828 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1829 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1830 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1831 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1832 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1833 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1834 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1835 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1836 : 
; 1837 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 1838 : 
; 1839 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1840 : 					if (f == 19) k--;

	cmp	DWORD PTR _f$[ebp], 19			; 00000013H
	jne	SHORT $LN182@cub_9
	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax
	jmp	SHORT $LN175@cub_9
$LN182@cub_9:

; 1841 : 					else j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN175@cub_9:

; 1842 : 				}
; 1843 : 			}
; 1844 : 			if (table[0][n - 1] != n * n && flag == 49 && k != n - 1 && table[j][k + 1] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN184@cub_9
	cmp	DWORD PTR _flag$[ebp], 49		; 00000031H
	jne	$LN184@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _k$[ebp], eax
	je	$LN184@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4+4], 0
	jne	$LN184@cub_9

; 1845 : 				k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 1846 : 				////c_3(table, &i, &j, &k);
; 1847 : 
; 1848 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1849 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1850 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1851 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1852 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1853 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1854 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1855 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1856 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1857 : 
; 1858 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1859 : 				int result = cub_9(table, 39, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	39					; 00000027H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$23[ebp], eax

; 1860 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$23[ebp], -1
	jne	$LN184@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN184@cub_9

; 1861 : 					////c_33(table, &i, &j, &k);
; 1862 : 
; 1863 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 1864 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1865 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1866 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1867 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1868 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1869 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1870 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1871 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1872 : 
; 1873 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 1874 : 
; 1875 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1876 : 					k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN184@cub_9:

; 1877 : 				}
; 1878 : 			}
; 1879 : 			if (table[0][n - 1] != n * n && flag == 19 || flag == 41) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	SHORT $LN188@cub_9
	cmp	DWORD PTR _flag$[ebp], 19		; 00000013H
	je	SHORT $LN187@cub_9
$LN188@cub_9:
	cmp	DWORD PTR _flag$[ebp], 41		; 00000029H
	jne	$LN186@cub_9
$LN187@cub_9:

; 1880 : 				if (table[0][n - 1] != n * n && flag == 19 && k != n - 1 && table[j][k + 1] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN189@cub_9
	cmp	DWORD PTR _flag$[ebp], 19		; 00000013H
	jne	$LN189@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _k$[ebp], eax
	je	$LN189@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4+4], 0
	jne	$LN189@cub_9

; 1881 : 					k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 1882 : 					////c_5(table, &i, &j, &k);
; 1883 : 
; 1884 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1885 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1886 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1887 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1888 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1889 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1890 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1891 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1892 : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1893 : 
; 1894 : 				}

	jmp	$LN190@cub_9
$LN189@cub_9:

; 1895 : 				else if (j != 0 && table[j - 1][k] == 0) {

	cmp	DWORD PTR _j$[ebp], 0
	je	$LN190@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jne	$LN190@cub_9

; 1896 : 					j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 1897 : 					////c_5(table, &i, &j, &k);
; 1898 : 
; 1899 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1900 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1901 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1902 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1903 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1904 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1905 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1906 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1907 : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN190@cub_9:

; 1908 : 
; 1909 : 				}
; 1910 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1911 : 				f = flag;

	mov	eax, DWORD PTR _flag$[ebp]
	mov	DWORD PTR _f$[ebp], eax

; 1912 : 				int result = cub_9(table, 11, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	11					; 0000000bH
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$22[ebp], eax

; 1913 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$22[ebp], -1
	jne	$LN186@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN186@cub_9

; 1914 : 					////c_55(table, &i, &j, &k);
; 1915 : 
; 1916 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 1917 : 
; 1918 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1919 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1920 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1921 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1922 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1923 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1924 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1925 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1926 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 1927 : 
; 1928 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1929 : 					if (f == 19) k--;

	cmp	DWORD PTR _f$[ebp], 19			; 00000013H
	jne	SHORT $LN193@cub_9
	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax
	jmp	SHORT $LN186@cub_9
$LN193@cub_9:

; 1930 : 					else j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN186@cub_9:

; 1931 : 				}
; 1932 : 			}
; 1933 : 			if (table[0][n - 1] != n * n && flag == 11 && j != 0 && table[j - 1][k] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN195@cub_9
	cmp	DWORD PTR _flag$[ebp], 11		; 0000000bH
	jne	$LN195@cub_9
	cmp	DWORD PTR _j$[ebp], 0
	je	$LN195@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jne	$LN195@cub_9

; 1934 : 				j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 1935 : 				////c_5(table, &i, &j, &k);
; 1936 : 
; 1937 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1938 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1939 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1940 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1941 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1942 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1943 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1944 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1945 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1946 : 
; 1947 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 1948 : 				int result = cub_9(table, 21, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$21[ebp], eax

; 1949 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$21[ebp], -1
	jne	$LN195@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN195@cub_9

; 1950 : 					////c_55(table, &i, &j, &k);
; 1951 : 
; 1952 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 1953 : 
; 1954 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1955 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1956 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1957 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1958 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1959 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1960 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 1961 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 1962 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 1963 : 
; 1964 : 					j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 1965 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx
$LN195@cub_9:

; 1966 : 				}
; 1967 : 			}
; 1968 : 			if (table[0][n - 1] != n * n && flag == 43 || flag == 37) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	SHORT $LN199@cub_9
	cmp	DWORD PTR _flag$[ebp], 43		; 0000002bH
	je	SHORT $LN198@cub_9
$LN199@cub_9:
	cmp	DWORD PTR _flag$[ebp], 37		; 00000025H
	jne	$LN197@cub_9
$LN198@cub_9:

; 1969 : 				if (table[0][n - 1] != n * n && flag == 37 && k != 0 && table[j][k - 1] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN200@cub_9
	cmp	DWORD PTR _flag$[ebp], 37		; 00000025H
	jne	$LN200@cub_9
	cmp	DWORD PTR _k$[ebp], 0
	je	$LN200@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4-4], 0
	jne	$LN200@cub_9

; 1970 : 					k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 1971 : 					////c_6(table, &i, &j, &k);
; 1972 : 
; 1973 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1974 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1975 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1976 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1977 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1978 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1979 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1980 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1981 : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1982 : 
; 1983 : 				}

	jmp	$LN201@cub_9
$LN200@cub_9:

; 1984 : 				else if (j != 0 && table[j - 1][k] == 0) {

	cmp	DWORD PTR _j$[ebp], 0
	je	$LN201@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jne	$LN201@cub_9

; 1985 : 					j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 1986 : 					////c_6(table, &i, &j, &k);
; 1987 : 
; 1988 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1989 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1990 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1991 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1992 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1993 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1994 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1995 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1996 : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN201@cub_9:

; 1997 : 
; 1998 : 				}
; 1999 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2000 : 				f = flag;

	mov	eax, DWORD PTR _flag$[ebp]
	mov	DWORD PTR _f$[ebp], eax

; 2001 : 				int result = cub_9(table, 33, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	33					; 00000021H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$20[ebp], eax

; 2002 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$20[ebp], -1
	jne	$LN197@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN197@cub_9

; 2003 : 					////c_66(table, &i, &j, &k);
; 2004 : 
; 2005 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 2006 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2007 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2008 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2009 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2010 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2011 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2012 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2013 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2014 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 2015 : 
; 2016 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2017 : 					if (f == 37) k++;

	cmp	DWORD PTR _f$[ebp], 37			; 00000025H
	jne	SHORT $LN204@cub_9
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
	jmp	SHORT $LN197@cub_9
$LN204@cub_9:

; 2018 : 					else j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN197@cub_9:

; 2019 : 				}
; 2020 : 			}
; 2021 : 			if (table[0][n - 1] != n * n && flag == 33 && j != 0 && table[j - 1][k] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN206@cub_9
	cmp	DWORD PTR _flag$[ebp], 33		; 00000021H
	jne	$LN206@cub_9
	cmp	DWORD PTR _j$[ebp], 0
	je	$LN206@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jne	$LN206@cub_9

; 2022 : 				j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 2023 : 				////c_6(table, &i, &j, &k);
; 2024 : 
; 2025 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2026 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2027 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2028 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2029 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2030 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2031 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2032 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2033 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 2034 : 
; 2035 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2036 : 				int result = cub_9(table, 23, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	23					; 00000017H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$19[ebp], eax

; 2037 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$19[ebp], -1
	jne	$LN206@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN206@cub_9

; 2038 : 					////c_66(table, &i, &j, &k);
; 2039 : 
; 2040 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 2041 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2042 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2043 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2044 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2045 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2046 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2047 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2048 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2049 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 2050 : 
; 2051 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2052 : 					j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN206@cub_9:

; 2053 : 				}
; 2054 : 			}
; 2055 : 			if (table[0][n - 1] != n * n && flag == 43 || flag == 37) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	SHORT $LN210@cub_9
	cmp	DWORD PTR _flag$[ebp], 43		; 0000002bH
	je	SHORT $LN209@cub_9
$LN210@cub_9:
	cmp	DWORD PTR _flag$[ebp], 37		; 00000025H
	jne	$LN208@cub_9
$LN209@cub_9:

; 2056 : 				if (table[0][n - 1] != n * n && flag == 37 && k != 0 && table[j][k - 1] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN211@cub_9
	cmp	DWORD PTR _flag$[ebp], 37		; 00000025H
	jne	$LN211@cub_9
	cmp	DWORD PTR _k$[ebp], 0
	je	$LN211@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4-4], 0
	jne	$LN211@cub_9

; 2057 : 					k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 2058 : 					////c_7(table, &i, &j, &k);
; 2059 : 
; 2060 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2061 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2062 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2063 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2064 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2065 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2066 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2067 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2068 : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 2069 : 
; 2070 : 				}

	jmp	$LN212@cub_9
$LN211@cub_9:

; 2071 : 				else if (j != 0 && table[j - 1][k] == 0) {

	cmp	DWORD PTR _j$[ebp], 0
	je	$LN212@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jne	$LN212@cub_9

; 2072 : 					j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 2073 : 					////c_7(table, &i, &j, &k);
; 2074 : 
; 2075 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2076 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2077 : 					table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2078 : 					table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2079 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2080 : 					table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2081 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2082 : 					table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2083 : 					table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN212@cub_9:

; 2084 : 
; 2085 : 				}
; 2086 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2087 : 				f = flag;

	mov	eax, DWORD PTR _flag$[ebp]
	mov	DWORD PTR _f$[ebp], eax

; 2088 : 				int result = cub_9(table, 47, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	47					; 0000002fH
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$18[ebp], eax

; 2089 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$18[ebp], -1
	jne	$LN208@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN208@cub_9

; 2090 : 					////c_77(table, &i, &j, &k);
; 2091 : 
; 2092 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 2093 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2094 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2095 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2096 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2097 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2098 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2099 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2100 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2101 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 2102 : 
; 2103 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2104 : 					if (f == 37) k++;

	cmp	DWORD PTR _f$[ebp], 37			; 00000025H
	jne	SHORT $LN215@cub_9
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
	jmp	SHORT $LN208@cub_9
$LN215@cub_9:

; 2105 : 					else j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN208@cub_9:

; 2106 : 				}
; 2107 : 			}
; 2108 : 			if (table[0][n - 1] != n * n && flag == 47 && k != 0 && table[j][k - 1] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN217@cub_9
	cmp	DWORD PTR _flag$[ebp], 47		; 0000002fH
	jne	$LN217@cub_9
	cmp	DWORD PTR _k$[ebp], 0
	je	$LN217@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4-4], 0
	jne	$LN217@cub_9

; 2109 : 				k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 2110 : 				////c_7(table, &i, &j, &k);
; 2111 : 
; 2112 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2113 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2114 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2115 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2116 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2117 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2118 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2119 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2120 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 2121 : 
; 2122 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2123 : 				int result = cub_9(table, 17, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$17[ebp], eax

; 2124 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$17[ebp], -1
	jne	$LN217@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN217@cub_9

; 2125 : 					////c_77(table, &i, &j, &k);
; 2126 : 
; 2127 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 2128 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2129 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2130 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2131 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2132 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2133 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2134 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2135 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2136 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 2137 : 
; 2138 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2139 : 					k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN217@cub_9:

; 2140 : 				}
; 2141 : 			}
; 2142 : 
; 2143 : 			//çèãçàãè
; 2144 : 			if (table[0][n - 1] != n * n && flag == 17 && j != n - 1 && table[j + 1][k] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN219@cub_9
	cmp	DWORD PTR _flag$[ebp], 17		; 00000011H
	jne	$LN219@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _j$[ebp], eax
	je	$LN219@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jne	$LN219@cub_9

; 2145 : 				j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 2146 : 				//zzHOR_1(table, &i, &j, &k);
; 2147 : 
; 2148 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2149 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2150 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2151 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2152 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2153 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2154 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2155 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2156 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 2157 : 
; 2158 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2159 : 				int result = cub_9(table, 39, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	39					; 00000027H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$16[ebp], eax

; 2160 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$16[ebp], -1
	jne	$LN219@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN219@cub_9

; 2161 : 					////zzHOR_11(table, &i, &j, &k);
; 2162 : 
; 2163 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 2164 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2165 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2166 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2167 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2168 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2169 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2170 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2171 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2172 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 2173 : 
; 2174 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2175 : 					j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN219@cub_9:

; 2176 : 				}
; 2177 : 			}
; 2178 : 			if (table[0][n - 1] != n * n && flag == 11 && j != 0 && table[j - 1][k] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN221@cub_9
	cmp	DWORD PTR _flag$[ebp], 11		; 0000000bH
	jne	$LN221@cub_9
	cmp	DWORD PTR _j$[ebp], 0
	je	$LN221@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jne	$LN221@cub_9

; 2179 : 				j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 2180 : 				//zzHOR_2(table, &i, &j, &k);
; 2181 : 
; 2182 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2183 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2184 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2185 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2186 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2187 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2188 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2189 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2190 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 2191 : 
; 2192 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2193 : 				int result = cub_9(table, 33, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	33					; 00000021H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$15[ebp], eax

; 2194 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$15[ebp], -1
	jne	$LN221@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN221@cub_9

; 2195 : 					//zzHOR_22(table, &i, &j, &k);
; 2196 : 
; 2197 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 2198 : 
; 2199 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2200 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2201 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2202 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2203 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2204 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2205 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2206 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2207 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 2208 : 
; 2209 : 					j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 2210 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx
$LN221@cub_9:

; 2211 : 				}
; 2212 : 			}
; 2213 : 			if (table[0][n - 1] != n * n && flag == 33 && j != 0 && table[j - 1][k] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN223@cub_9
	cmp	DWORD PTR _flag$[ebp], 33		; 00000021H
	jne	$LN223@cub_9
	cmp	DWORD PTR _j$[ebp], 0
	je	$LN223@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jne	$LN223@cub_9

; 2214 : 				j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 2215 : 				//zzHOR_3(table, &i, &j, &k);
; 2216 : 
; 2217 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2218 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2219 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2220 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2221 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2222 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2223 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2224 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2225 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 2226 : 
; 2227 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2228 : 				int result = cub_9(table, 11, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	11					; 0000000bH
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$14[ebp], eax

; 2229 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$14[ebp], -1
	jne	$LN223@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN223@cub_9

; 2230 : 					//zzHOR_33(table, &i, &j, &k);
; 2231 : 
; 2232 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 2233 : 
; 2234 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2235 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2236 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2237 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2238 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2239 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2240 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2241 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2242 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 2243 : 
; 2244 : 					j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 2245 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx
$LN223@cub_9:

; 2246 : 				}
; 2247 : 			}
; 2248 : 			if (table[0][n - 1] != n * n && flag == 39 && j != n - 1 && table[j + 1][k] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN225@cub_9
	cmp	DWORD PTR _flag$[ebp], 39		; 00000027H
	jne	$LN225@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _j$[ebp], eax
	je	$LN225@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jne	$LN225@cub_9

; 2249 : 				j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 2250 : 				//zzHOR_4(table, &i, &j, &k);
; 2251 : 
; 2252 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2253 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2254 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2255 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2256 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2257 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2258 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2259 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2260 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 2261 : 
; 2262 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2263 : 				int result = cub_9(table, 17, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$13[ebp], eax

; 2264 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$13[ebp], -1
	jne	$LN225@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN225@cub_9

; 2265 : 					//zzHOR_44(table, &i, &j, &k);
; 2266 : 
; 2267 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 2268 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2269 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2270 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2271 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2272 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2273 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2274 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2275 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2276 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 2277 : 
; 2278 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2279 : 					j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN225@cub_9:

; 2280 : 				}
; 2281 : 			}
; 2282 : 			if (table[0][n - 1] != n * n && flag == 23 && k != n - 1 && table[j][k + 1] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN227@cub_9
	cmp	DWORD PTR _flag$[ebp], 23		; 00000017H
	jne	$LN227@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _k$[ebp], eax
	je	$LN227@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4+4], 0
	jne	$LN227@cub_9

; 2283 : 				k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 2284 : 				//zzVER_1(table, &i, &j, &k);
; 2285 : 
; 2286 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2287 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2288 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2289 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2290 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2291 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2292 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2293 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2294 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 2295 : 
; 2296 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2297 : 				int result = cub_9(table, 49, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	49					; 00000031H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$12[ebp], eax

; 2298 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$12[ebp], -1
	jne	$LN227@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN227@cub_9

; 2299 : 					//zzVER_11(table, &i, &j, &k);
; 2300 : 
; 2301 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 2302 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2303 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2304 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2305 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2306 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2307 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2308 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2309 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2310 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 2311 : 
; 2312 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2313 : 					k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN227@cub_9:

; 2314 : 				}
; 2315 : 			}
; 2316 : 			if (table[0][n - 1] != n * n && flag == 49 && k != n - 1 && table[j][k + 1] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN229@cub_9
	cmp	DWORD PTR _flag$[ebp], 49		; 00000031H
	jne	$LN229@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _k$[ebp], eax
	je	$LN229@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4+4], 0
	jne	$LN229@cub_9

; 2317 : 				k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 2318 : 				//zzVER_2(table, &i, &j, &k);
; 2319 : 
; 2320 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2321 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2322 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2323 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2324 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2325 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2326 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2327 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2328 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 2329 : 
; 2330 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2331 : 				int result = cub_9(table, 23, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	23					; 00000017H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$11[ebp], eax

; 2332 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$11[ebp], -1
	jne	$LN229@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN229@cub_9

; 2333 : 					//zzVER_22(table, &i, &j, &k);
; 2334 : 
; 2335 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 2336 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2337 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2338 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2339 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2340 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2341 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2342 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2343 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2344 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 2345 : 
; 2346 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2347 : 					k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN229@cub_9:

; 2348 : 				}
; 2349 : 			}
; 2350 : 			if (table[0][n - 1] != n * n && flag == 47 && k != 0 && table[j][k - 1] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN231@cub_9
	cmp	DWORD PTR _flag$[ebp], 47		; 0000002fH
	jne	$LN231@cub_9
	cmp	DWORD PTR _k$[ebp], 0
	je	$LN231@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4-4], 0
	jne	$LN231@cub_9

; 2351 : 				k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 2352 : 				//zzVER_3(table, &i, &j, &k);
; 2353 : 
; 2354 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2355 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2356 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2357 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2358 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2359 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2360 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2361 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2362 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 2363 : 
; 2364 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2365 : 				int result = cub_9(table, 21, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$10[ebp], eax

; 2366 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$10[ebp], -1
	jne	$LN231@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN231@cub_9

; 2367 : 					//zzVER_33(table, &i, &j, &k);
; 2368 : 
; 2369 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 2370 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2371 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2372 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2373 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2374 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2375 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2376 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2377 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2378 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 2379 : 
; 2380 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2381 : 					k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN231@cub_9:

; 2382 : 				}
; 2383 : 			}
; 2384 : 			if (table[0][n - 1] != n * n && flag == 21 && k != 0 && table[j][k - 1] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN233@cub_9
	cmp	DWORD PTR _flag$[ebp], 21		; 00000015H
	jne	$LN233@cub_9
	cmp	DWORD PTR _k$[ebp], 0
	je	$LN233@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4-4], 0
	jne	$LN233@cub_9

; 2385 : 				k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 2386 : 				//zzVER_4(table, &i, &j, &k);
; 2387 : 
; 2388 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2389 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2390 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2391 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2392 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2393 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2394 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2395 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2396 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 2397 : 
; 2398 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2399 : 				int result = cub_9(table, 47, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	47					; 0000002fH
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$9[ebp], eax

; 2400 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$9[ebp], -1
	jne	$LN233@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN233@cub_9

; 2401 : 					//zzVER_44(table, &i, &j, &k);
; 2402 : 
; 2403 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 2404 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2405 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2406 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2407 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2408 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2409 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2410 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2411 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2412 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 2413 : 
; 2414 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2415 : 					k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN233@cub_9:

; 2416 : 				}
; 2417 : 			}
; 2418 : 
; 2419 : 			//îáõîäíûå 
; 2420 : 			if (table[0][n - 1] != n * n && flag == 49 && k != n - 1 && table[j][k + 1] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN235@cub_9
	cmp	DWORD PTR _flag$[ebp], 49		; 00000031H
	jne	$LN235@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _k$[ebp], eax
	je	$LN235@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4+4], 0
	jne	$LN235@cub_9

; 2421 : 				k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 2422 : 				//o_1(table, &i, &j, &k);
; 2423 : 
; 2424 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2425 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2426 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2427 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2428 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2429 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2430 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2431 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2432 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 2433 : 
; 2434 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2435 : 				int result = cub_9(table, 11, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	11					; 0000000bH
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$8[ebp], eax

; 2436 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$8[ebp], -1
	jne	$LN235@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN235@cub_9

; 2437 : 					//o_11(table, &i, &j, &k);
; 2438 : 
; 2439 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 2440 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2441 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2442 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2443 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2444 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2445 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2446 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2447 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2448 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 2449 : 
; 2450 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2451 : 					k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN235@cub_9:

; 2452 : 				}
; 2453 : 			}
; 2454 : 			if (table[0][n - 1] != n * n && flag == 47 && k != 0 && table[j][k - 1] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN237@cub_9
	cmp	DWORD PTR _flag$[ebp], 47		; 0000002fH
	jne	$LN237@cub_9
	cmp	DWORD PTR _k$[ebp], 0
	je	$LN237@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4-4], 0
	jne	$LN237@cub_9

; 2455 : 				k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 2456 : 				//o_2(table, &i, &j, &k);
; 2457 : 
; 2458 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2459 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2460 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2461 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2462 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2463 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2464 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2465 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2466 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 2467 : 
; 2468 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2469 : 				int result = cub_9(table, 33, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	33					; 00000021H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$7[ebp], eax

; 2470 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$7[ebp], -1
	jne	$LN237@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN237@cub_9

; 2471 : 					//o_22(table, &i, &j, &k);
; 2472 : 
; 2473 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 2474 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2475 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2476 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2477 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2478 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2479 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2480 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2481 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2482 : 
; 2483 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 2484 : 
; 2485 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2486 : 					k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN237@cub_9:

; 2487 : 				}
; 2488 : 			}
; 2489 : 			if (table[0][n - 1] != n * n && flag == 33 && j != 0 && table[j - 1][k] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN239@cub_9
	cmp	DWORD PTR _flag$[ebp], 33		; 00000021H
	jne	$LN239@cub_9
	cmp	DWORD PTR _j$[ebp], 0
	je	$LN239@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jne	$LN239@cub_9

; 2490 : 				j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 2491 : 				//o_3(table, &i, &j, &k);
; 2492 : 
; 2493 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2494 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2495 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2496 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2497 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2498 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2499 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2500 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2501 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 2502 : 
; 2503 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2504 : 				int result = cub_9(table, 47, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	47					; 0000002fH
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$6[ebp], eax

; 2505 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$6[ebp], -1
	jne	$LN239@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN239@cub_9

; 2506 : 					//o_33(table, &i, &j, &k);
; 2507 : 
; 2508 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 2509 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2510 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2511 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2512 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2513 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2514 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2515 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2516 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2517 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 2518 : 
; 2519 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2520 : 					j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN239@cub_9:

; 2521 : 				}
; 2522 : 			}
; 2523 : 			if (table[0][n - 1] != n * n && flag == 39 && j != n - 1 && table[j + 1][k] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN241@cub_9
	cmp	DWORD PTR _flag$[ebp], 39		; 00000027H
	jne	$LN241@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _j$[ebp], eax
	je	$LN241@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jne	$LN241@cub_9

; 2524 : 				j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 2525 : 				//o_4(table, &i, &j, &k);
; 2526 : 
; 2527 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2528 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2529 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2530 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2531 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2532 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2533 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2534 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2535 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 2536 : 
; 2537 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2538 : 				int result = cub_9(table, 21, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$5[ebp], eax

; 2539 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$5[ebp], -1
	jne	$LN241@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN241@cub_9

; 2540 : 					//o_44(table, &i, &j, &k);
; 2541 : 
; 2542 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 2543 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2544 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2545 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2546 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2547 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2548 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2549 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2550 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2551 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 2552 : 
; 2553 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2554 : 					j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN241@cub_9:

; 2555 : 				}
; 2556 : 			}
; 2557 : 			if (table[0][n - 1] != n * n && flag == 23 && k != n - 1 && table[j][k + 1] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN243@cub_9
	cmp	DWORD PTR _flag$[ebp], 23		; 00000017H
	jne	$LN243@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _k$[ebp], eax
	je	$LN243@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4+4], 0
	jne	$LN243@cub_9

; 2558 : 				k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 2559 : 				//o_5(table, &i, &j, &k);
; 2560 : 
; 2561 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2562 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2563 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2564 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2565 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2566 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2567 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2568 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2569 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 2570 : 
; 2571 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2572 : 				int result = cub_9(table, 17, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$4[ebp], eax

; 2573 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$4[ebp], -1
	jne	$LN243@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN243@cub_9

; 2574 : 					//o_55(table, &i, &j, &k);
; 2575 : 
; 2576 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 2577 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2578 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2579 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2580 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2581 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2582 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2583 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2584 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2585 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 2586 : 
; 2587 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2588 : 					k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN243@cub_9:

; 2589 : 				}
; 2590 : 			}
; 2591 : 			if (table[0][n - 1] != n * n && flag == 21 && k != 0 && table[j][k - 1] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN245@cub_9
	cmp	DWORD PTR _flag$[ebp], 21		; 00000015H
	jne	$LN245@cub_9
	cmp	DWORD PTR _k$[ebp], 0
	je	$LN245@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4-4], 0
	jne	$LN245@cub_9

; 2592 : 				k--;

	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 2593 : 				//o_6(table, &i, &j, &k);
; 2594 : 
; 2595 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2596 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2597 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2598 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2599 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2600 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2601 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2602 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2603 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 2604 : 
; 2605 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2606 : 				int result = cub_9(table, 39, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	39					; 00000027H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$3[ebp], eax

; 2607 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$3[ebp], -1
	jne	$LN245@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN245@cub_9

; 2608 : 					//o_66(table, &i, &j, &k);
; 2609 : 
; 2610 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 2611 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2612 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2613 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2614 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2615 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2616 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2617 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2618 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2619 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 2620 : 
; 2621 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2622 : 					k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN245@cub_9:

; 2623 : 				}
; 2624 : 			}
; 2625 : 			if (table[0][n - 1] != n * n && flag == 11 && j != 0 && table[j - 1][k] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN247@cub_9
	cmp	DWORD PTR _flag$[ebp], 11		; 0000000bH
	jne	$LN247@cub_9
	cmp	DWORD PTR _j$[ebp], 0
	je	$LN247@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jne	$LN247@cub_9

; 2626 : 				j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 2627 : 				//o_7(table, &i, &j, &k);
; 2628 : 
; 2629 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2630 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2631 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2632 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2633 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2634 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2635 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2636 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2637 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 2638 : 
; 2639 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2640 : 				int result = cub_9(table, 49, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	49					; 00000031H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$2[ebp], eax

; 2641 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$2[ebp], -1
	jne	$LN247@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN247@cub_9

; 2642 : 					//o_77(table, &i, &j, &k);
; 2643 : 
; 2644 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 2645 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2646 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2647 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2648 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2649 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2650 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2651 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2652 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2653 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 2654 : 
; 2655 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2656 : 					j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN247@cub_9:

; 2657 : 				}
; 2658 : 			}
; 2659 : 			if (table[0][n - 1] != n * n && flag == 17 && j != n - 1 && table[j + 1][k] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN249@cub_9
	cmp	DWORD PTR _flag$[ebp], 17		; 00000011H
	jne	$LN249@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _j$[ebp], eax
	je	$LN249@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jne	$LN249@cub_9

; 2660 : 				j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 2661 : 				//o_8(table, &i, &j, &k);
; 2662 : 
; 2663 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2664 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2665 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2666 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2667 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2668 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2669 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2670 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2671 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 2672 : 
; 2673 : 				*sum -= 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2674 : 				int result = cub_9(table, 23, i, j, k, n, sum, tab, I, J, K);

	mov	eax, DWORD PTR _K$[ebp]
	push	eax
	mov	ecx, DWORD PTR _J$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _tab$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	23					; 00000017H
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z		; cub_9
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$1[ebp], eax

; 2675 : 				if (result == -1 && table[0][n - 1] != n * n) {

	cmp	DWORD PTR _result$1[ebp], -1
	jne	$LN249@cub_9
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN249@cub_9

; 2676 : 					//o_88(table, &i, &j, &k);
; 2677 : 
; 2678 : 					i = i - 9;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 9
	mov	DWORD PTR _i$[ebp], eax

; 2679 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2680 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2681 : 					table[j][k++] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2682 : 					table[j++][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2683 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2684 : 					table[j][k--] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx

; 2685 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2686 : 					table[j--][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2687 : 
; 2688 : 					table[j][k] = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 2689 : 
; 2690 : 					*sum += 9;

	mov	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 9
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx], ecx

; 2691 : 					j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN249@cub_9:

; 2692 : 				}
; 2693 : 			}
; 2694 : 
; 2695 : 
; 2696 : 		}

	jmp	$LN3@cub_9
$LN129@cub_9:

; 2697 : 
; 2698 : 		//ïîñëåäíèé êâàäðàíò
; 2699 : 		else if (*sum == 9) {

	mov	eax, DWORD PTR _sum$[ebp]
	cmp	DWORD PTR [eax], 9
	jne	$LN3@cub_9

; 2700 : 			if (table[0][n - 1] != n * n && flag == 33 && j != 0 && table[j - 1][k] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN252@cub_9
	cmp	DWORD PTR _flag$[ebp], 33		; 00000021H
	jne	$LN252@cub_9
	cmp	DWORD PTR _j$[ebp], 0
	je	$LN252@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jne	$LN252@cub_9

; 2701 : 				j--;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 2702 : 				//o_2(table, &i, &j, &k);
; 2703 : 
; 2704 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2705 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2706 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2707 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2708 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2709 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2710 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2711 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2712 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 2713 : 
; 2714 : 				flag = 3;

	mov	DWORD PTR _flag$[ebp], 3
$LN252@cub_9:

; 2715 : 			}
; 2716 : 			if (table[0][n - 1] != n * n && flag == 23 && K != n / 3 - 1 && table[j][k + 1] == 0) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	je	$LN3@cub_9
	cmp	DWORD PTR _flag$[ebp], 23		; 00000017H
	jne	$LN3@cub_9
	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	sub	eax, 1
	cmp	DWORD PTR _K$[ebp], eax
	je	$LN3@cub_9
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [edx+eax*4+4], 0
	jne	$LN3@cub_9

; 2717 : 				k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 2718 : 				//o_8(table, &i, &j, &k);
; 2719 : 
; 2720 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2721 : 				table[j++][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2722 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2723 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2724 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2725 : 				table[j][k--] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2726 : 				table[j--][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2727 : 				table[j][k++] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2728 : 				table[j][k] = i++;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 2729 : 
; 2730 : 				flag = 3;

	mov	DWORD PTR _flag$[ebp], 3
$LN3@cub_9:

; 2731 : 			}
; 2732 : 		}
; 2733 : 	}
; 2734 : 
; 2735 : //	printf("flagEND = %d\n", flag);
; 2736 : 
; 2737 : 	if (table[0][n - 1] == n * n)

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], ecx
	jne	SHORT $LN254@cub_9

; 2738 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN1@cub_9
	jmp	SHORT $LN1@cub_9
$LN254@cub_9:

; 2739 : 	else /*if (table[0][n - 1] != 0 && table[0][n - 1] != n * n)*/
; 2740 : 		return -1;

	or	eax, -1
$LN1@cub_9:

; 2741 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 1164				; 0000048cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?cub_9@@YAHPAPAHHHHHHPAH0HHH@Z ENDP			; cub_9
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _scanf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_scanf	PROC						; COMDAT

; 1282 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-36]
	mov	ecx, 9
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6DFAE8B8_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 1283 :         int _Result;
; 1284 :         va_list _ArgList;
; 1285 :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 1286 :         _Result = _vfscanf_l(stdin, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	esi, esp
	push	0
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	__vfscanf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 1287 :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 1288 :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 1289 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_scanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT __vfscanf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfscanf_l PROC					; COMDAT

; 1064 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6DFAE8B8_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 1065 :         return __stdio_common_vfscanf(

	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_scanf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	DWORD PTR __imp____stdio_common_vfscanf
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1066 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 1067 :             _Stream, _Format, _Locale, _ArgList);
; 1068 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vfscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 956  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-36]
	mov	ecx, 9
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6DFAE8B8_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 957  :         int _Result;
; 958  :         va_list _ArgList;
; 959  :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	esi, esp
	push	1
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 961  :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 962  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 963  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 644  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6DFAE8B8_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 646  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_scanf_options
_TEXT	SEGMENT
___local_stdio_scanf_options PROC			; COMDAT

; 100  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A2143F22_corecrt_stdio_config@h
	call	@__CheckForDebuggerJustMyCode@4

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
___local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 90   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A2143F22_corecrt_stdio_config@h
	call	@__CheckForDebuggerJustMyCode@4

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
